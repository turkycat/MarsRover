
final_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00002390  00002424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b72  008001dc  008001dc  00002500  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  00002500  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb2  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000672a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  00006759  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d47  00000000  00000000  00006a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ec7  00000000  00000000  0000a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002314  00000000  00000000  0000b697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  0000d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cff  00000000  00000000  0000e45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e16  00000000  00000000  0000f15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000290  00000000  00000000  00011f71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c1       	rjmp	.+930    	; 0x3c8 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	a7 c1       	rjmp	.+846    	; 0x388 <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	b0 c1       	rjmp	.+864    	; 0x3aa <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e9       	ldi	r30, 0x90	; 144
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3d       	cpi	r26, 0xDC	; 220
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2d e0       	ldi	r18, 0x0D	; 13
      b4:	ac ed       	ldi	r26, 0xDC	; 220
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 34       	cpi	r26, 0x4E	; 78
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
//char string[30];
//extern unsigned int dangerflag;

int main(void)
{
	oi_t *sensor_data = oi_alloc();
      ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <oi_alloc>
      ce:	ec 01       	movw	r28, r24
	init_all(sensor_data);
      d0:	f8 d1       	rcall	.+1008   	; 0x4c2 <init_all>
	
	oi_update_sensor(sensor_data);
      d2:	ce 01       	movw	r24, r28
      d4:	37 d5       	rcall	.+2670   	; 0xb44 <oi_update_sensor>
	
	lprintf("Start");
      d6:	86 e9       	ldi	r24, 0x96	; 150
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	9f 93       	push	r25
      dc:	8f 93       	push	r24
      de:	7d d0       	rcall	.+250    	; 0x1da <lprintf>
	wait_ms(1000);
      e0:	88 ee       	ldi	r24, 0xE8	; 232
      e2:	93 e0       	ldi	r25, 0x03	; 3
      e4:	3b d3       	rcall	.+1654   	; 0x75c <wait_ms>
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
	
	while(1)
	{
		//if( !dangerflag )
		//{
			sensor_check( sensor_data, 1 );
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	ce 01       	movw	r24, r28
      f0:	7b d7       	rcall	.+3830   	; 0xfe8 <sensor_check>
		//}
		//USART_Transmit_NoSignedIssues_Buffer( status_string );
		//dangerflag = 0;
		handle_cmd(sensor_data);
      f2:	ce 01       	movw	r24, r28
      f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <handle_cmd>
      f8:	f8 cf       	rjmp	.-16     	; 0xea <main+0x20>

000000fa <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
      fa:	de 9a       	sbi	0x1b, 6	; 27
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	2e d3       	rcall	.+1628   	; 0x75c <wait_ms>
     100:	de 98       	cbi	0x1b, 6	; 27
     102:	8b b3       	in	r24, 0x1b	; 27
     104:	80 7f       	andi	r24, 0xF0	; 240
     106:	8b bb       	out	0x1b, r24	; 27
     108:	08 95       	ret

0000010a <lcd_command>:
     10a:	cf 93       	push	r28
     10c:	c8 2f       	mov	r28, r24
     10e:	dc 98       	cbi	0x1b, 4	; 27
     110:	8b b3       	in	r24, 0x1b	; 27
     112:	9c 2f       	mov	r25, r28
     114:	92 95       	swap	r25
     116:	9f 70       	andi	r25, 0x0F	; 15
     118:	89 2b       	or	r24, r25
     11a:	8b bb       	out	0x1b, r24	; 27
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	ed df       	rcall	.-38     	; 0xfa <lcd_toggle_clear>
     120:	8b b3       	in	r24, 0x1b	; 27
     122:	cf 70       	andi	r28, 0x0F	; 15
     124:	c8 2b       	or	r28, r24
     126:	cb bb       	out	0x1b, r28	; 27
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	e7 df       	rcall	.-50     	; 0xfa <lcd_toggle_clear>
     12c:	dc 9a       	sbi	0x1b, 4	; 27
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <lcd_clear>:
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	ea df       	rcall	.-44     	; 0x10a <lcd_command>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	10 c3       	rjmp	.+1568   	; 0x75c <wait_ms>

0000013c <lcd_home_line1>:
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	e5 cf       	rjmp	.-54     	; 0x10a <lcd_command>

00000140 <lcd_init>:
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	8a bb       	out	0x1a, r24	; 26
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	8b bb       	out	0x1b, r24	; 27
     148:	de 9a       	sbi	0x1b, 6	; 27
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	06 d3       	rcall	.+1548   	; 0x75c <wait_ms>
     150:	de 98       	cbi	0x1b, 6	; 27
     152:	85 e0       	ldi	r24, 0x05	; 5
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	02 d3       	rcall	.+1540   	; 0x75c <wait_ms>
     158:	de 9a       	sbi	0x1b, 6	; 27
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fe d2       	rcall	.+1532   	; 0x75c <wait_ms>
     160:	de 98       	cbi	0x1b, 6	; 27
     162:	de 9a       	sbi	0x1b, 6	; 27
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	f9 d2       	rcall	.+1522   	; 0x75c <wait_ms>
     16a:	de 98       	cbi	0x1b, 6	; 27
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	8b bb       	out	0x1b, r24	; 27
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	c3 df       	rcall	.-122    	; 0xfa <lcd_toggle_clear>
     174:	8b b3       	in	r24, 0x1b	; 27
     176:	8b bb       	out	0x1b, r24	; 27
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	bf df       	rcall	.-130    	; 0xfa <lcd_toggle_clear>
     17c:	8b b3       	in	r24, 0x1b	; 27
     17e:	8e 60       	ori	r24, 0x0E	; 14
     180:	8b bb       	out	0x1b, r24	; 27
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	ba df       	rcall	.-140    	; 0xfa <lcd_toggle_clear>
     186:	8b b3       	in	r24, 0x1b	; 27
     188:	8b bb       	out	0x1b, r24	; 27
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	b6 df       	rcall	.-148    	; 0xfa <lcd_toggle_clear>
     18e:	8b b3       	in	r24, 0x1b	; 27
     190:	86 60       	ori	r24, 0x06	; 6
     192:	8b bb       	out	0x1b, r24	; 27
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	b1 df       	rcall	.-158    	; 0xfa <lcd_toggle_clear>
     198:	8b b3       	in	r24, 0x1b	; 27
     19a:	8b bb       	out	0x1b, r24	; 27
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	ad df       	rcall	.-166    	; 0xfa <lcd_toggle_clear>
     1a0:	d8 9a       	sbi	0x1b, 0	; 27
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	aa df       	rcall	.-172    	; 0xfa <lcd_toggle_clear>
     1a6:	dc 9a       	sbi	0x1b, 4	; 27
     1a8:	c9 cf       	rjmp	.-110    	; 0x13c <lcd_home_line1>

000001aa <lcd_home_line2>:
     1aa:	80 ec       	ldi	r24, 0xC0	; 192
     1ac:	ae cf       	rjmp	.-164    	; 0x10a <lcd_command>

000001ae <lcd_home_line3>:
     1ae:	84 e9       	ldi	r24, 0x94	; 148
     1b0:	ac cf       	rjmp	.-168    	; 0x10a <lcd_command>

000001b2 <lcd_home_line4>:
     1b2:	84 ed       	ldi	r24, 0xD4	; 212
     1b4:	aa cf       	rjmp	.-172    	; 0x10a <lcd_command>

000001b6 <lcd_putc>:
     1b6:	cf 93       	push	r28
     1b8:	c8 2f       	mov	r28, r24
     1ba:	8b b3       	in	r24, 0x1b	; 27
     1bc:	9c 2f       	mov	r25, r28
     1be:	92 95       	swap	r25
     1c0:	9f 70       	andi	r25, 0x0F	; 15
     1c2:	89 2b       	or	r24, r25
     1c4:	8b bb       	out	0x1b, r24	; 27
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	98 df       	rcall	.-208    	; 0xfa <lcd_toggle_clear>
     1ca:	8b b3       	in	r24, 0x1b	; 27
     1cc:	cf 70       	andi	r28, 0x0F	; 15
     1ce:	c8 2b       	or	r28, r24
     1d0:	cb bb       	out	0x1b, r28	; 27
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	92 df       	rcall	.-220    	; 0xfa <lcd_toggle_clear>
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	c1 55       	subi	r28, 0x51	; 81
     1f0:	d1 09       	sbc	r29, r1
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	fe 01       	movw	r30, r28
     1fe:	e4 5a       	subi	r30, 0xA4	; 164
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	41 91       	ld	r20, Z+
     204:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     206:	2e 2f       	mov	r18, r30
     208:	3f 2f       	mov	r19, r31
     20a:	61 e5       	ldi	r22, 0x51	; 81
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     216:	be 01       	movw	r22, r28
     218:	6f 5f       	subi	r22, 0xFF	; 255
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	8c ed       	ldi	r24, 0xDC	; 220
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strcmp>
     224:	28 2f       	mov	r18, r24
     226:	39 2f       	mov	r19, r25
     228:	23 2b       	or	r18, r19
     22a:	09 f4       	brne	.+2      	; 0x22e <lprintf+0x54>
     22c:	44 c0       	rjmp	.+136    	; 0x2b6 <lprintf+0xdc>
		return;
	
	strcpy(lastbuffer, buffer);
     22e:	be 01       	movw	r22, r28
     230:	6f 5f       	subi	r22, 0xFF	; 255
     232:	7f 4f       	sbci	r23, 0xFF	; 255
     234:	8c ed       	ldi	r24, 0xDC	; 220
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <strcpy>
	lcd_clear();
     23c:	7a df       	rcall	.-268    	; 0x132 <lcd_clear>
     23e:	cc 24       	eor	r12, r12
     240:	c3 94       	inc	r12
     242:	d1 2c       	mov	r13, r1
     244:	cc 0e       	add	r12, r28
     246:	dd 1e       	adc	r13, r29
	char *str = buffer;
	int charnum = 0;
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     24c:	0f 2e       	mov	r0, r31
     24e:	f4 e1       	ldi	r31, 0x14	; 20
     250:	ef 2e       	mov	r14, r31
     252:	f1 2c       	mov	r15, r1
     254:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     256:	27 c0       	rjmp	.+78     	; 0x2a6 <lprintf+0xcc>
		if (*str == '\n') {
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	51 f4       	brne	.+20     	; 0x270 <lprintf+0x96>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     25c:	c8 01       	movw	r24, r16
     25e:	b7 01       	movw	r22, r14
     260:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     264:	97 01       	movw	r18, r14
     266:	28 1b       	sub	r18, r24
     268:	39 0b       	sbc	r19, r25
     26a:	02 0f       	add	r16, r18
     26c:	13 1f       	adc	r17, r19
     26e:	03 c0       	rjmp	.+6      	; 0x276 <lprintf+0x9c>
		} else {
			lcd_putc(*str);
     270:	a2 df       	rcall	.-188    	; 0x1b6 <lcd_putc>
			charnum++;
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     276:	c8 01       	movw	r24, r16
     278:	b7 01       	movw	r22, r14
     27a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     27e:	89 2b       	or	r24, r25
     280:	91 f4       	brne	.+36     	; 0x2a6 <lprintf+0xcc>
			switch (charnum / LCD_WIDTH) {
     282:	c8 01       	movw	r24, r16
     284:	b7 01       	movw	r22, r14
     286:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     28a:	62 30       	cpi	r22, 0x02	; 2
     28c:	71 05       	cpc	r23, r1
     28e:	41 f0       	breq	.+16     	; 0x2a0 <lprintf+0xc6>
     290:	63 30       	cpi	r22, 0x03	; 3
     292:	71 05       	cpc	r23, r1
     294:	39 f0       	breq	.+14     	; 0x2a4 <lprintf+0xca>
     296:	61 30       	cpi	r22, 0x01	; 1
     298:	71 05       	cpc	r23, r1
     29a:	29 f4       	brne	.+10     	; 0x2a6 <lprintf+0xcc>
			case 1:
				lcd_home_line2();
     29c:	86 df       	rcall	.-244    	; 0x1aa <lcd_home_line2>
				break;
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <lprintf+0xcc>
			case 2:
				lcd_home_line3();
     2a0:	86 df       	rcall	.-244    	; 0x1ae <lcd_home_line3>
				break;
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <lprintf+0xcc>
			case 3:
				lcd_home_line4();
     2a4:	86 df       	rcall	.-244    	; 0x1b2 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     2a6:	f6 01       	movw	r30, r12
     2a8:	81 91       	ld	r24, Z+
     2aa:	6f 01       	movw	r12, r30
     2ac:	88 23       	and	r24, r24
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <lprintf+0xdc>
     2b0:	00 35       	cpi	r16, 0x50	; 80
     2b2:	11 05       	cpc	r17, r1
     2b4:	8c f2       	brlt	.-94     	; 0x258 <lprintf+0x7e>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     2b6:	cf 5a       	subi	r28, 0xAF	; 175
     2b8:	df 4f       	sbci	r29, 0xFF	; 255
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <__vector_11>:
	{	sprintf(TX_string,"%d", data_IR[j]);
		uprint(TX_string);
	}
	USART_Transmit(0);
	return location;
}
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	2f 93       	push	r18
     2e2:	3f 93       	push	r19
     2e4:	4f 93       	push	r20
     2e6:	5f 93       	push	r21
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	80 91 40 02 	lds	r24, 0x0240
     2f4:	90 91 41 02 	lds	r25, 0x0241
     2f8:	89 2b       	or	r24, r25
     2fa:	71 f1       	breq	.+92     	; 0x358 <__vector_11+0x82>
     2fc:	86 b5       	in	r24, 0x26	; 38
     2fe:	97 b5       	in	r25, 0x27	; 39
     300:	90 93 3f 02 	sts	0x023F, r25
     304:	80 93 3e 02 	sts	0x023E, r24
     308:	80 91 3d 02 	lds	r24, 0x023D
     30c:	40 91 3e 02 	lds	r20, 0x023E
     310:	50 91 3f 02 	lds	r21, 0x023F
     314:	20 91 40 02 	lds	r18, 0x0240
     318:	30 91 41 02 	lds	r19, 0x0241
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	dc 01       	movw	r26, r24
     324:	99 27       	eor	r25, r25
     326:	88 27       	eor	r24, r24
     328:	84 0f       	add	r24, r20
     32a:	95 1f       	adc	r25, r21
     32c:	a1 1d       	adc	r26, r1
     32e:	b1 1d       	adc	r27, r1
     330:	82 1b       	sub	r24, r18
     332:	93 0b       	sbc	r25, r19
     334:	a1 09       	sbc	r26, r1
     336:	b1 09       	sbc	r27, r1
     338:	80 93 39 02 	sts	0x0239, r24
     33c:	90 93 3a 02 	sts	0x023A, r25
     340:	a0 93 3b 02 	sts	0x023B, r26
     344:	b0 93 3c 02 	sts	0x023C, r27
     348:	10 92 41 02 	sts	0x0241, r1
     34c:	10 92 40 02 	sts	0x0240, r1
     350:	8e b5       	in	r24, 0x2e	; 46
     352:	80 64       	ori	r24, 0x40	; 64
     354:	8e bd       	out	0x2e, r24	; 46
     356:	0b c0       	rjmp	.+22     	; 0x36e <__vector_11+0x98>
     358:	86 b5       	in	r24, 0x26	; 38
     35a:	97 b5       	in	r25, 0x27	; 39
     35c:	90 93 41 02 	sts	0x0241, r25
     360:	80 93 40 02 	sts	0x0240, r24
     364:	10 92 3d 02 	sts	0x023D, r1
     368:	8e b5       	in	r24, 0x2e	; 46
     36a:	8f 7b       	andi	r24, 0xBF	; 191
     36c:	8e bd       	out	0x2e, r24	; 46
     36e:	bf 91       	pop	r27
     370:	af 91       	pop	r26
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <__vector_14>:
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	8f 93       	push	r24
     394:	80 91 3d 02 	lds	r24, 0x023D
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	80 93 3d 02 	sts	0x023D, r24
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_18>:
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	8f 93       	push	r24
     3b6:	8c b1       	in	r24, 0x0c	; 12
     3b8:	80 93 ae 03 	sts	0x03AE, r24
     3bc:	8f 91       	pop	r24
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_9>:
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	80 91 9d 07 	lds	r24, 0x079D
     3da:	90 91 9e 07 	lds	r25, 0x079E
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	90 93 9e 07 	sts	0x079E, r25
     3e4:	80 93 9d 07 	sts	0x079D, r24
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <ADC_init>:
     3f6:	80 ec       	ldi	r24, 0xC0	; 192
     3f8:	87 b9       	out	0x07, r24	; 7
     3fa:	39 9a       	sbi	0x07, 1	; 7
     3fc:	87 e8       	ldi	r24, 0x87	; 135
     3fe:	86 b9       	out	0x06, r24	; 6
     400:	08 95       	ret

00000402 <USART_Init>:
     402:	90 93 90 00 	sts	0x0090, r25
     406:	89 b9       	out	0x09, r24	; 9
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	8b b9       	out	0x0b, r24	; 11
     40c:	8e e0       	ldi	r24, 0x0E	; 14
     40e:	80 93 95 00 	sts	0x0095, r24
     412:	88 e1       	ldi	r24, 0x18	; 24
     414:	8a b9       	out	0x0a, r24	; 10
     416:	08 95       	ret

00000418 <Sonar_init>:
     418:	1f bc       	out	0x2f, r1	; 47
     41a:	83 ec       	ldi	r24, 0xC3	; 195
     41c:	8e bd       	out	0x2e, r24	; 46
     41e:	10 92 7a 00 	sts	0x007A, r1
     422:	08 95       	ret

00000424 <Servo_Init>:
     424:	83 ee       	ldi	r24, 0xE3	; 227
     426:	80 93 8b 00 	sts	0x008B, r24
     42a:	80 91 12 01 	lds	r24, 0x0112
     42e:	90 91 13 01 	lds	r25, 0x0113
     432:	89 2b       	or	r24, r25
     434:	21 f0       	breq	.+8      	; 0x43e <Servo_Init+0x1a>
     436:	8a ed       	ldi	r24, 0xDA	; 218
     438:	80 93 8a 00 	sts	0x008A, r24
     43c:	03 c0       	rjmp	.+6      	; 0x444 <Servo_Init+0x20>
     43e:	8b ed       	ldi	r24, 0xDB	; 219
     440:	80 93 8a 00 	sts	0x008A, r24
     444:	10 92 8c 00 	sts	0x008C, r1
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	80 93 7d 00 	sts	0x007D, r24
     44e:	14 9a       	sbi	0x02, 4	; 2
     450:	80 91 12 01 	lds	r24, 0x0112
     454:	90 91 13 01 	lds	r25, 0x0113
     458:	89 2b       	or	r24, r25
     45a:	91 f1       	breq	.+100    	; 0x4c0 <Servo_Init+0x9c>
     45c:	80 91 0c 01 	lds	r24, 0x010C
     460:	90 91 0d 01 	lds	r25, 0x010D
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	90 93 0d 01 	sts	0x010D, r25
     474:	80 93 0c 01 	sts	0x010C, r24
     478:	80 91 0e 01 	lds	r24, 0x010E
     47c:	90 91 0f 01 	lds	r25, 0x010F
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	90 93 0f 01 	sts	0x010F, r25
     490:	80 93 0e 01 	sts	0x010E, r24
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	51 e4       	ldi	r21, 0x41	; 65
     49c:	60 91 08 01 	lds	r22, 0x0108
     4a0:	70 91 09 01 	lds	r23, 0x0109
     4a4:	80 91 0a 01 	lds	r24, 0x010A
     4a8:	90 91 0b 01 	lds	r25, 0x010B
     4ac:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsf3>
     4b0:	60 93 08 01 	sts	0x0108, r22
     4b4:	70 93 09 01 	sts	0x0109, r23
     4b8:	80 93 0a 01 	sts	0x010A, r24
     4bc:	90 93 0b 01 	sts	0x010B, r25
     4c0:	08 95       	ret

000004c2 <init_all>:
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
     4c8:	3b de       	rcall	.-906    	; 0x140 <lcd_init>
     4ca:	ac df       	rcall	.-168    	; 0x424 <Servo_Init>
     4cc:	a5 df       	rcall	.-182    	; 0x418 <Sonar_init>
     4ce:	93 df       	rcall	.-218    	; 0x3f6 <ADC_init>
     4d0:	81 e2       	ldi	r24, 0x21	; 33
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	96 df       	rcall	.-212    	; 0x402 <USART_Init>
     4d6:	ce 01       	movw	r24, r28
     4d8:	0e 94 0f 0b 	call	0x161e	; 0x161e <oi_init>
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 0f 0b 	call	0x161e	; 0x161e <oi_init>
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <ADC_read>:
     4e8:	36 9a       	sbi	0x06, 6	; 6
     4ea:	36 99       	sbic	0x06, 6	; 6
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <ADC_read+0x2>
     4ee:	24 b1       	in	r18, 0x04	; 4
     4f0:	35 b1       	in	r19, 0x05	; 5
     4f2:	93 2f       	mov	r25, r19
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	ac 01       	movw	r20, r24
     4f8:	42 0f       	add	r20, r18
     4fa:	51 1d       	adc	r21, r1
     4fc:	9a 01       	movw	r18, r20
     4fe:	84 2f       	mov	r24, r20
     500:	93 2f       	mov	r25, r19
     502:	08 95       	ret

00000504 <move_backward>:
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	7c 01       	movw	r14, r24
     512:	eb 01       	movw	r28, r22
     514:	6a e6       	ldi	r22, 0x6A	; 106
     516:	7f ef       	ldi	r23, 0xFF	; 255
     518:	8a e6       	ldi	r24, 0x6A	; 106
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	a6 d7       	rcall	.+3916   	; 0x146a <oi_set_wheels>
     51e:	1c 16       	cp	r1, r28
     520:	1d 06       	cpc	r1, r29
     522:	d4 f4       	brge	.+52     	; 0x558 <move_backward+0x54>
     524:	8e e8       	ldi	r24, 0x8E	; 142
     526:	62 d7       	rcall	.+3780   	; 0x13ec <oi_byte_tx>
     528:	83 e1       	ldi	r24, 0x13	; 19
     52a:	60 d7       	rcall	.+3776   	; 0x13ec <oi_byte_tx>
     52c:	d5 d7       	rcall	.+4010   	; 0x14d8 <oi_byte_rx>
     52e:	80 93 af 03 	sts	0x03AF, r24
     532:	10 92 b0 03 	sts	0x03B0, r1
     536:	d0 d7       	rcall	.+4000   	; 0x14d8 <oi_byte_rx>
     538:	80 93 74 0a 	sts	0x0A74, r24
     53c:	10 91 af 03 	lds	r17, 0x03AF
     540:	00 e0       	ldi	r16, 0x00	; 0
     542:	98 01       	movw	r18, r16
     544:	28 0f       	add	r18, r24
     546:	31 1d       	adc	r19, r1
     548:	f7 01       	movw	r30, r14
     54a:	35 87       	std	Z+13, r19	; 0x0d
     54c:	24 87       	std	Z+12, r18	; 0x0c
     54e:	c2 0f       	add	r28, r18
     550:	d3 1f       	adc	r29, r19
     552:	1c 16       	cp	r1, r28
     554:	1d 06       	cpc	r1, r29
     556:	34 f3       	brlt	.-52     	; 0x524 <move_backward+0x20>
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	84 d7       	rcall	.+3848   	; 0x146a <oi_set_wheels>
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	08 95       	ret

00000570 <timer2_start>:
     570:	10 92 9e 07 	sts	0x079E, r1
     574:	10 92 9d 07 	sts	0x079D, r1
     578:	81 11       	cpse	r24, r1
     57a:	06 c0       	rjmp	.+12     	; 0x588 <timer2_start+0x18>
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	85 bd       	out	0x25, r24	; 37
     580:	87 b7       	in	r24, 0x37	; 55
     582:	80 68       	ori	r24, 0x80	; 128
     584:	87 bf       	out	0x37, r24	; 55
     586:	0f c0       	rjmp	.+30     	; 0x5a6 <timer2_start+0x36>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	31 f4       	brne	.+12     	; 0x598 <timer2_start+0x28>
     58c:	89 e0       	ldi	r24, 0x09	; 9
     58e:	85 bd       	out	0x25, r24	; 37
     590:	87 b7       	in	r24, 0x37	; 55
     592:	80 68       	ori	r24, 0x80	; 128
     594:	87 bf       	out	0x37, r24	; 55
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <timer2_start+0x36>
     598:	88 30       	cpi	r24, 0x08	; 8
     59a:	29 f4       	brne	.+10     	; 0x5a6 <timer2_start+0x36>
     59c:	8a e0       	ldi	r24, 0x0A	; 10
     59e:	85 bd       	out	0x25, r24	; 37
     5a0:	87 b7       	in	r24, 0x37	; 55
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	87 bf       	out	0x37, r24	; 55
     5a6:	78 94       	sei
     5a8:	08 95       	ret

000005aa <timer2_stop>:
     5aa:	87 b7       	in	r24, 0x37	; 55
     5ac:	8f 77       	andi	r24, 0x7F	; 127
     5ae:	87 bf       	out	0x37, r24	; 55
     5b0:	85 b5       	in	r24, 0x25	; 37
     5b2:	8f 77       	andi	r24, 0x7F	; 127
     5b4:	85 bd       	out	0x25, r24	; 37
     5b6:	08 95       	ret

000005b8 <wait_us>:
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	80 e1       	ldi	r24, 0x10	; 16
     5c0:	83 bd       	out	0x23, r24	; 35
     5c2:	10 92 9e 07 	sts	0x079E, r1
     5c6:	10 92 9d 07 	sts	0x079D, r1
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	d1 df       	rcall	.-94     	; 0x570 <timer2_start>
     5ce:	20 91 9d 07 	lds	r18, 0x079D
     5d2:	30 91 9e 07 	lds	r19, 0x079E
     5d6:	2c 17       	cp	r18, r28
     5d8:	3d 07       	cpc	r19, r29
     5da:	c8 f3       	brcs	.-14     	; 0x5ce <wait_us+0x16>
     5dc:	e6 df       	rcall	.-52     	; 0x5aa <timer2_stop>
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <Sonar_start>:
     5e4:	8c 9a       	sbi	0x11, 4	; 17
     5e6:	94 9a       	sbi	0x12, 4	; 18
     5e8:	88 e2       	ldi	r24, 0x28	; 40
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	e5 df       	rcall	.-54     	; 0x5b8 <wait_us>
     5ee:	94 98       	cbi	0x12, 4	; 18
     5f0:	8c 98       	cbi	0x11, 4	; 17
     5f2:	78 94       	sei
     5f4:	08 95       	ret

000005f6 <ping_read>:
     5f6:	f6 df       	rcall	.-20     	; 0x5e4 <Sonar_start>
     5f8:	06 b6       	in	r0, 0x36	; 54
     5fa:	05 fe       	sbrs	r0, 5
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <ping_read+0x2>
     5fe:	86 b7       	in	r24, 0x36	; 54
     600:	80 62       	ori	r24, 0x20	; 32
     602:	86 bf       	out	0x36, r24	; 54
     604:	86 b5       	in	r24, 0x26	; 38
     606:	97 b5       	in	r25, 0x27	; 39
     608:	90 93 41 02 	sts	0x0241, r25
     60c:	80 93 40 02 	sts	0x0240, r24
     610:	10 92 3d 02 	sts	0x023D, r1
     614:	8e b5       	in	r24, 0x2e	; 46
     616:	8f 7b       	andi	r24, 0xBF	; 191
     618:	8e bd       	out	0x2e, r24	; 46
     61a:	06 b6       	in	r0, 0x36	; 54
     61c:	05 fc       	sbrc	r0, 5
     61e:	04 c0       	rjmp	.+8      	; 0x628 <ping_read+0x32>
     620:	86 b7       	in	r24, 0x36	; 54
     622:	06 b6       	in	r0, 0x36	; 54
     624:	05 fe       	sbrs	r0, 5
     626:	fc cf       	rjmp	.-8      	; 0x620 <ping_read+0x2a>
     628:	86 b5       	in	r24, 0x26	; 38
     62a:	97 b5       	in	r25, 0x27	; 39
     62c:	90 93 3f 02 	sts	0x023F, r25
     630:	80 93 3e 02 	sts	0x023E, r24
     634:	80 91 3d 02 	lds	r24, 0x023D
     638:	40 91 3e 02 	lds	r20, 0x023E
     63c:	50 91 3f 02 	lds	r21, 0x023F
     640:	20 91 40 02 	lds	r18, 0x0240
     644:	30 91 41 02 	lds	r19, 0x0241
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	dc 01       	movw	r26, r24
     650:	99 27       	eor	r25, r25
     652:	88 27       	eor	r24, r24
     654:	84 0f       	add	r24, r20
     656:	95 1f       	adc	r25, r21
     658:	a1 1d       	adc	r26, r1
     65a:	b1 1d       	adc	r27, r1
     65c:	82 1b       	sub	r24, r18
     65e:	93 0b       	sbc	r25, r19
     660:	a1 09       	sbc	r26, r1
     662:	b1 09       	sbc	r27, r1
     664:	80 93 39 02 	sts	0x0239, r24
     668:	90 93 3a 02 	sts	0x023A, r25
     66c:	a0 93 3b 02 	sts	0x023B, r26
     670:	b0 93 3c 02 	sts	0x023C, r27
     674:	8e b5       	in	r24, 0x2e	; 46
     676:	80 64       	ori	r24, 0x40	; 64
     678:	8e bd       	out	0x2e, r24	; 46
     67a:	86 b7       	in	r24, 0x36	; 54
     67c:	80 62       	ori	r24, 0x20	; 32
     67e:	86 bf       	out	0x36, r24	; 54
     680:	60 91 39 02 	lds	r22, 0x0239
     684:	70 91 3a 02 	lds	r23, 0x023A
     688:	80 91 3b 02 	lds	r24, 0x023B
     68c:	90 91 3c 02 	lds	r25, 0x023C
     690:	0e 94 3d 0c 	call	0x187a	; 0x187a <__floatunsisf>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 ed       	ldi	r19, 0xD0	; 208
     698:	44 e0       	ldi	r20, 0x04	; 4
     69a:	57 e4       	ldi	r21, 0x47	; 71
     69c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsf3>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	34 e2       	ldi	r19, 0x24	; 36
     6a4:	44 ef       	ldi	r20, 0xF4	; 244
     6a6:	58 e4       	ldi	r21, 0x48	; 72
     6a8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e7       	ldi	r20, 0x70	; 112
     6b2:	51 e4       	ldi	r21, 0x41	; 65
     6b4:	e0 d7       	rcall	.+4032   	; 0x1676 <__subsf3>
     6b6:	60 93 35 02 	sts	0x0235, r22
     6ba:	70 93 36 02 	sts	0x0236, r23
     6be:	80 93 37 02 	sts	0x0237, r24
     6c2:	90 93 38 02 	sts	0x0238, r25
     6c6:	10 92 3d 02 	sts	0x023D, r1
     6ca:	82 e3       	ldi	r24, 0x32	; 50
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	74 df       	rcall	.-280    	; 0x5b8 <wait_us>
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	48 e4       	ldi	r20, 0x48	; 72
     6d6:	53 e4       	ldi	r21, 0x43	; 67
     6d8:	60 91 35 02 	lds	r22, 0x0235
     6dc:	70 91 36 02 	lds	r23, 0x0236
     6e0:	80 91 37 02 	lds	r24, 0x0237
     6e4:	90 91 38 02 	lds	r25, 0x0238
     6e8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__gesf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	4c f5       	brge	.+82     	; 0x742 <ping_read+0x14c>
     6f0:	80 91 2f 02 	lds	r24, 0x022F
     6f4:	90 91 30 02 	lds	r25, 0x0230
     6f8:	03 97       	sbiw	r24, 0x03	; 3
     6fa:	8c f0       	brlt	.+34     	; 0x71e <ping_read+0x128>
     6fc:	10 92 30 02 	sts	0x0230, r1
     700:	10 92 2f 02 	sts	0x022F, r1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e8       	ldi	r25, 0x80	; 128
     708:	a7 e4       	ldi	r26, 0x47	; 71
     70a:	b3 e4       	ldi	r27, 0x43	; 67
     70c:	80 93 35 02 	sts	0x0235, r24
     710:	90 93 36 02 	sts	0x0236, r25
     714:	a0 93 37 02 	sts	0x0237, r26
     718:	b0 93 38 02 	sts	0x0238, r27
     71c:	12 c0       	rjmp	.+36     	; 0x742 <ping_read+0x14c>
     71e:	6b df       	rcall	.-298    	; 0x5f6 <ping_read>
     720:	60 93 35 02 	sts	0x0235, r22
     724:	70 93 36 02 	sts	0x0236, r23
     728:	80 93 37 02 	sts	0x0237, r24
     72c:	90 93 38 02 	sts	0x0238, r25
     730:	80 91 2f 02 	lds	r24, 0x022F
     734:	90 91 30 02 	lds	r25, 0x0230
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	90 93 30 02 	sts	0x0230, r25
     73e:	80 93 2f 02 	sts	0x022F, r24
     742:	50 91 35 02 	lds	r21, 0x0235
     746:	40 91 36 02 	lds	r20, 0x0236
     74a:	30 91 37 02 	lds	r19, 0x0237
     74e:	20 91 38 02 	lds	r18, 0x0238
     752:	65 2f       	mov	r22, r21
     754:	74 2f       	mov	r23, r20
     756:	83 2f       	mov	r24, r19
     758:	92 2f       	mov	r25, r18
     75a:	08 95       	ret

0000075c <wait_ms>:
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8a ef       	ldi	r24, 0xFA	; 250
     764:	83 bd       	out	0x23, r24	; 35
     766:	10 92 9e 07 	sts	0x079E, r1
     76a:	10 92 9d 07 	sts	0x079D, r1
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	ff de       	rcall	.-514    	; 0x570 <timer2_start>
     772:	20 91 9d 07 	lds	r18, 0x079D
     776:	30 91 9e 07 	lds	r19, 0x079E
     77a:	2c 17       	cp	r18, r28
     77c:	3d 07       	cpc	r19, r29
     77e:	c8 f3       	brcs	.-14     	; 0x772 <wait_ms+0x16>
     780:	14 df       	rcall	.-472    	; 0x5aa <timer2_stop>
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <Servo>:
     788:	bc 01       	movw	r22, r24
     78a:	80 91 10 01 	lds	r24, 0x0110
     78e:	90 91 11 01 	lds	r25, 0x0111
     792:	90 93 87 00 	sts	0x0087, r25
     796:	80 93 86 00 	sts	0x0086, r24
     79a:	88 27       	eor	r24, r24
     79c:	77 fd       	sbrc	r23, 7
     79e:	80 95       	com	r24
     7a0:	98 2f       	mov	r25, r24
     7a2:	0e 94 3f 0c 	call	0x187e	; 0x187e <__floatsisf>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 ea       	ldi	r19, 0xA0	; 160
     7aa:	4c e5       	ldi	r20, 0x5C	; 92
     7ac:	55 e4       	ldi	r21, 0x45	; 69
     7ae:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__mulsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	44 e3       	ldi	r20, 0x34	; 52
     7b8:	53 e4       	ldi	r21, 0x43	; 67
     7ba:	c6 d7       	rcall	.+3980   	; 0x1748 <__divsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	45 ea       	ldi	r20, 0xA5	; 165
     7c2:	54 e4       	ldi	r21, 0x44	; 68
     7c4:	59 d7       	rcall	.+3762   	; 0x1678 <__addsf3>
     7c6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fixsfsi>
     7ca:	60 93 42 02 	sts	0x0242, r22
     7ce:	70 93 43 02 	sts	0x0243, r23
     7d2:	86 2f       	mov	r24, r22
     7d4:	97 2f       	mov	r25, r23
     7d6:	90 93 85 00 	sts	0x0085, r25
     7da:	80 93 84 00 	sts	0x0084, r24
     7de:	80 91 7c 00 	lds	r24, 0x007C
     7e2:	84 ff       	sbrs	r24, 4
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <Servo+0x68>
     7e6:	ec e7       	ldi	r30, 0x7C	; 124
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8f 7e       	andi	r24, 0xEF	; 239
     7ee:	80 83       	st	Z, r24
     7f0:	80 91 14 01 	lds	r24, 0x0114
     7f4:	90 91 15 01 	lds	r25, 0x0115
     7f8:	20 91 42 02 	lds	r18, 0x0242
     7fc:	30 91 43 02 	lds	r19, 0x0243
     800:	82 1b       	sub	r24, r18
     802:	93 0b       	sbc	r25, r19
     804:	1a f4       	brpl	.+6      	; 0x80c <Servo+0x84>
     806:	91 95       	neg	r25
     808:	81 95       	neg	r24
     80a:	91 09       	sbc	r25, r1
     80c:	65 e0       	ldi	r22, 0x05	; 5
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     814:	70 93 b2 03 	sts	0x03B2, r23
     818:	60 93 b1 03 	sts	0x03B1, r22
     81c:	80 91 7c 00 	lds	r24, 0x007C
     820:	83 ff       	sbrs	r24, 3
     822:	0a c0       	rjmp	.+20     	; 0x838 <Servo+0xb0>
     824:	ec e7       	ldi	r30, 0x7C	; 124
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	87 7f       	andi	r24, 0xF7	; 247
     82c:	80 83       	st	Z, r24
     82e:	80 91 b1 03 	lds	r24, 0x03B1
     832:	90 91 b2 03 	lds	r25, 0x03B2
     836:	92 df       	rcall	.-220    	; 0x75c <wait_ms>
     838:	80 91 42 02 	lds	r24, 0x0242
     83c:	90 91 43 02 	lds	r25, 0x0243
     840:	80 93 14 01 	sts	0x0114, r24
     844:	90 93 15 01 	sts	0x0115, r25
     848:	08 95       	ret

0000084a <IR_read>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	4c de       	rcall	.-872    	; 0x4e8 <ADC_read>
     850:	ec 01       	movw	r28, r24
     852:	87 e1       	ldi	r24, 0x17	; 23
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	82 df       	rcall	.-252    	; 0x75c <wait_ms>
     858:	47 de       	rcall	.-882    	; 0x4e8 <ADC_read>
     85a:	c8 0f       	add	r28, r24
     85c:	d9 1f       	adc	r29, r25
     85e:	87 e1       	ldi	r24, 0x17	; 23
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	7c df       	rcall	.-264    	; 0x75c <wait_ms>
     864:	ce 01       	movw	r24, r28
     866:	96 95       	lsr	r25
     868:	87 95       	ror	r24
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	23 e0       	ldi	r18, 0x03	; 3
     86e:	92 07       	cpc	r25, r18
     870:	c0 f0       	brcs	.+48     	; 0x8a2 <IR_read+0x58>
     872:	9c 01       	movw	r18, r24
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	28 1b       	sub	r18, r24
     882:	39 0b       	sbc	r19, r25
     884:	35 51       	subi	r19, 0x15	; 21
     886:	a1 e8       	ldi	r26, 0x81	; 129
     888:	b0 e8       	ldi	r27, 0x80	; 128
     88a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     88e:	88 0f       	add	r24, r24
     890:	89 2f       	mov	r24, r25
     892:	88 1f       	adc	r24, r24
     894:	99 0b       	sbc	r25, r25
     896:	91 95       	neg	r25
     898:	67 e0       	ldi	r22, 0x07	; 7
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	68 1b       	sub	r22, r24
     89e:	79 0b       	sbc	r23, r25
     8a0:	2c c1       	rjmp	.+600    	; 0xafa <IR_read+0x2b0>
     8a2:	9c 01       	movw	r18, r24
     8a4:	2d 58       	subi	r18, 0x8D	; 141
     8a6:	32 40       	sbci	r19, 0x02	; 2
     8a8:	23 37       	cpi	r18, 0x73	; 115
     8aa:	31 05       	cpc	r19, r1
     8ac:	c0 f4       	brcc	.+48     	; 0x8de <IR_read+0x94>
     8ae:	8c 58       	subi	r24, 0x8C	; 140
     8b0:	92 4c       	sbci	r25, 0xC2	; 194
     8b2:	9c 01       	movw	r18, r24
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	22 0f       	add	r18, r18
     8ba:	33 1f       	adc	r19, r19
     8bc:	af e9       	ldi	r26, 0x9F	; 159
     8be:	b6 e4       	ldi	r27, 0x46	; 70
     8c0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     8c4:	96 95       	lsr	r25
     8c6:	87 95       	ror	r24
     8c8:	92 95       	swap	r25
     8ca:	82 95       	swap	r24
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	89 27       	eor	r24, r25
     8d0:	9f 70       	andi	r25, 0x0F	; 15
     8d2:	89 27       	eor	r24, r25
     8d4:	6a e0       	ldi	r22, 0x0A	; 10
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	68 1b       	sub	r22, r24
     8da:	79 0b       	sbc	r23, r25
     8dc:	0e c1       	rjmp	.+540    	; 0xafa <IR_read+0x2b0>
     8de:	9c 01       	movw	r18, r24
     8e0:	27 52       	subi	r18, 0x27	; 39
     8e2:	32 40       	sbci	r19, 0x02	; 2
     8e4:	25 36       	cpi	r18, 0x65	; 101
     8e6:	31 05       	cpc	r19, r1
     8e8:	c8 f4       	brcc	.+50     	; 0x91c <IR_read+0xd2>
     8ea:	86 52       	subi	r24, 0x26	; 38
     8ec:	92 4c       	sbci	r25, 0xC2	; 194
     8ee:	9c 01       	movw	r18, r24
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	a1 ea       	ldi	r26, 0xA1	; 161
     8fa:	b0 ea       	ldi	r27, 0xA0	; 160
     8fc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     900:	00 24       	eor	r0, r0
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	00 1c       	adc	r0, r0
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	00 1c       	adc	r0, r0
     90e:	89 2f       	mov	r24, r25
     910:	90 2d       	mov	r25, r0
     912:	6d e0       	ldi	r22, 0x0D	; 13
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	68 1b       	sub	r22, r24
     918:	79 0b       	sbc	r23, r25
     91a:	ef c0       	rjmp	.+478    	; 0xafa <IR_read+0x2b0>
     91c:	9c 01       	movw	r18, r24
     91e:	21 5d       	subi	r18, 0xD1	; 209
     920:	31 40       	sbci	r19, 0x01	; 1
     922:	25 35       	cpi	r18, 0x55	; 85
     924:	31 05       	cpc	r19, r1
     926:	e0 f4       	brcc	.+56     	; 0x960 <IR_read+0x116>
     928:	9c 01       	movw	r18, r24
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	9c 01       	movw	r18, r24
     938:	20 51       	subi	r18, 0x10	; 16
     93a:	39 40       	sbci	r19, 0x09	; 9
     93c:	a3 e8       	ldi	r26, 0x83	; 131
     93e:	be eb       	ldi	r27, 0xBE	; 190
     940:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     944:	00 24       	eor	r0, r0
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	00 1c       	adc	r0, r0
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	00 1c       	adc	r0, r0
     952:	89 2f       	mov	r24, r25
     954:	90 2d       	mov	r25, r0
     956:	61 e1       	ldi	r22, 0x11	; 17
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	68 1b       	sub	r22, r24
     95c:	79 0b       	sbc	r23, r25
     95e:	cd c0       	rjmp	.+410    	; 0xafa <IR_read+0x2b0>
     960:	9c 01       	movw	r18, r24
     962:	2a 59       	subi	r18, 0x9A	; 154
     964:	31 40       	sbci	r19, 0x01	; 1
     966:	26 33       	cpi	r18, 0x36	; 54
     968:	31 05       	cpc	r19, r1
     96a:	00 f5       	brcc	.+64     	; 0x9ac <IR_read+0x162>
     96c:	89 59       	subi	r24, 0x99	; 153
     96e:	91 4c       	sbci	r25, 0xC1	; 193
     970:	ac 01       	movw	r20, r24
     972:	44 0f       	add	r20, r20
     974:	55 1f       	adc	r21, r21
     976:	44 0f       	add	r20, r20
     978:	55 1f       	adc	r21, r21
     97a:	9a 01       	movw	r18, r20
     97c:	a5 ee       	ldi	r26, 0xE5	; 229
     97e:	b9 e2       	ldi	r27, 0x29	; 41
     980:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     984:	48 1b       	sub	r20, r24
     986:	59 0b       	sbc	r21, r25
     988:	9a 01       	movw	r18, r20
     98a:	36 95       	lsr	r19
     98c:	27 95       	ror	r18
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	96 95       	lsr	r25
     994:	87 95       	ror	r24
     996:	92 95       	swap	r25
     998:	82 95       	swap	r24
     99a:	8f 70       	andi	r24, 0x0F	; 15
     99c:	89 27       	eor	r24, r25
     99e:	9f 70       	andi	r25, 0x0F	; 15
     9a0:	89 27       	eor	r24, r25
     9a2:	64 e1       	ldi	r22, 0x14	; 20
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	68 1b       	sub	r22, r24
     9a8:	79 0b       	sbc	r23, r25
     9aa:	a7 c0       	rjmp	.+334    	; 0xafa <IR_read+0x2b0>
     9ac:	9c 01       	movw	r18, r24
     9ae:	26 57       	subi	r18, 0x76	; 118
     9b0:	31 40       	sbci	r19, 0x01	; 1
     9b2:	23 32       	cpi	r18, 0x23	; 35
     9b4:	31 05       	cpc	r19, r1
     9b6:	d8 f4       	brcc	.+54     	; 0x9ee <IR_read+0x1a4>
     9b8:	9c 01       	movw	r18, r24
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	9c 01       	movw	r18, r24
     9c8:	29 54       	subi	r18, 0x49	; 73
     9ca:	37 40       	sbci	r19, 0x07	; 7
     9cc:	af e8       	ldi	r26, 0x8F	; 143
     9ce:	b3 ee       	ldi	r27, 0xE3	; 227
     9d0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	92 95       	swap	r25
     9da:	82 95       	swap	r24
     9dc:	8f 70       	andi	r24, 0x0F	; 15
     9de:	89 27       	eor	r24, r25
     9e0:	9f 70       	andi	r25, 0x0F	; 15
     9e2:	89 27       	eor	r24, r25
     9e4:	68 e1       	ldi	r22, 0x18	; 24
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	68 1b       	sub	r22, r24
     9ea:	79 0b       	sbc	r23, r25
     9ec:	86 c0       	rjmp	.+268    	; 0xafa <IR_read+0x2b0>
     9ee:	9c 01       	movw	r18, r24
     9f0:	28 53       	subi	r18, 0x38	; 56
     9f2:	31 40       	sbci	r19, 0x01	; 1
     9f4:	2d 33       	cpi	r18, 0x3D	; 61
     9f6:	31 05       	cpc	r19, r1
     9f8:	e0 f4       	brcc	.+56     	; 0xa32 <IR_read+0x1e8>
     9fa:	9c 01       	movw	r18, r24
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	28 0f       	add	r18, r24
     a0a:	39 1f       	adc	r19, r25
     a0c:	2f 5e       	subi	r18, 0xEF	; 239
     a0e:	3a 40       	sbci	r19, 0x0A	; 10
     a10:	36 95       	lsr	r19
     a12:	27 95       	ror	r18
     a14:	a1 e1       	ldi	r26, 0x11	; 17
     a16:	b2 e4       	ldi	r27, 0x42	; 66
     a18:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	60 e2       	ldi	r22, 0x20	; 32
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	68 1b       	sub	r22, r24
     a2e:	79 0b       	sbc	r23, r25
     a30:	64 c0       	rjmp	.+200    	; 0xafa <IR_read+0x2b0>
     a32:	9c 01       	movw	r18, r24
     a34:	21 5f       	subi	r18, 0xF1	; 241
     a36:	31 09       	sbc	r19, r1
     a38:	26 34       	cpi	r18, 0x46	; 70
     a3a:	31 05       	cpc	r19, r1
     a3c:	f0 f4       	brcc	.+60     	; 0xa7a <IR_read+0x230>
     a3e:	9c 01       	movw	r18, r24
     a40:	22 0f       	add	r18, r18
     a42:	33 1f       	adc	r19, r19
     a44:	22 0f       	add	r18, r18
     a46:	33 1f       	adc	r19, r19
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	9c 01       	movw	r18, r24
     a52:	20 57       	subi	r18, 0x70	; 112
     a54:	38 40       	sbci	r19, 0x08	; 8
     a56:	a3 ec       	ldi	r26, 0xC3	; 195
     a58:	b6 ee       	ldi	r27, 0xE6	; 230
     a5a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     a5e:	00 24       	eor	r0, r0
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	00 1c       	adc	r0, r0
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	00 1c       	adc	r0, r0
     a6c:	89 2f       	mov	r24, r25
     a6e:	90 2d       	mov	r25, r0
     a70:	69 e2       	ldi	r22, 0x29	; 41
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	68 1b       	sub	r22, r24
     a76:	79 0b       	sbc	r23, r25
     a78:	40 c0       	rjmp	.+128    	; 0xafa <IR_read+0x2b0>
     a7a:	9c 01       	movw	r18, r24
     a7c:	20 5d       	subi	r18, 0xD0	; 208
     a7e:	31 09       	sbc	r19, r1
     a80:	20 32       	cpi	r18, 0x20	; 32
     a82:	31 05       	cpc	r19, r1
     a84:	e8 f4       	brcc	.+58     	; 0xac0 <IR_read+0x276>
     a86:	9c 01       	movw	r18, r24
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	22 0f       	add	r18, r18
     a92:	33 1f       	adc	r19, r19
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	9c 01       	movw	r18, r24
     a9a:	27 54       	subi	r18, 0x47	; 71
     a9c:	37 40       	sbci	r19, 0x07	; 7
     a9e:	af e3       	ldi	r26, 0x3F	; 63
     aa0:	b8 ef       	ldi	r27, 0xF8	; 248
     aa2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	92 95       	swap	r25
     aac:	82 95       	swap	r24
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	89 27       	eor	r24, r25
     ab2:	9f 70       	andi	r25, 0x0F	; 15
     ab4:	89 27       	eor	r24, r25
     ab6:	62 e3       	ldi	r22, 0x32	; 50
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	68 1b       	sub	r22, r24
     abc:	79 0b       	sbc	r23, r25
     abe:	1d c0       	rjmp	.+58     	; 0xafa <IR_read+0x2b0>
     ac0:	8f 3c       	cpi	r24, 0xCF	; 207
     ac2:	91 05       	cpc	r25, r1
     ac4:	c0 f4       	brcc	.+48     	; 0xaf6 <IR_read+0x2ac>
     ac6:	4f e1       	ldi	r20, 0x1F	; 31
     ac8:	48 9f       	mul	r20, r24
     aca:	90 01       	movw	r18, r0
     acc:	49 9f       	mul	r20, r25
     ace:	30 0d       	add	r19, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	24 5d       	subi	r18, 0xD4	; 212
     ad4:	34 41       	sbci	r19, 0x14	; 20
     ad6:	af e0       	ldi	r26, 0x0F	; 15
     ad8:	ba ee       	ldi	r27, 0xEA	; 234
     ada:	fb d7       	rcall	.+4086   	; 0x1ad2 <__umulhisi3>
     adc:	96 95       	lsr	r25
     ade:	87 95       	ror	r24
     ae0:	92 95       	swap	r25
     ae2:	82 95       	swap	r24
     ae4:	8f 70       	andi	r24, 0x0F	; 15
     ae6:	89 27       	eor	r24, r25
     ae8:	9f 70       	andi	r25, 0x0F	; 15
     aea:	89 27       	eor	r24, r25
     aec:	60 e5       	ldi	r22, 0x50	; 80
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	68 1b       	sub	r22, r24
     af2:	79 0b       	sbc	r23, r25
     af4:	02 c0       	rjmp	.+4      	; 0xafa <IR_read+0x2b0>
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 91 2d 02 	lds	r24, 0x022D
     afe:	90 91 2e 02 	lds	r25, 0x022E
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	90 93 2e 02 	sts	0x022E, r25
     b08:	80 93 2d 02 	sts	0x022D, r24
     b0c:	03 97       	sbiw	r24, 0x03	; 3
     b0e:	7c f4       	brge	.+30     	; 0xb2e <IR_read+0x2e4>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	b2 d6       	rcall	.+3428   	; 0x187a <__floatunsisf>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 ec       	ldi	r20, 0xC0	; 192
     b1c:	50 e4       	ldi	r21, 0x40	; 64
     b1e:	ac d5       	rcall	.+2904   	; 0x1678 <__addsf3>
     b20:	80 d6       	rcall	.+3328   	; 0x1822 <__fixunssfsi>
     b22:	67 39       	cpi	r22, 0x97	; 151
     b24:	71 05       	cpc	r23, r1
     b26:	28 f0       	brcs	.+10     	; 0xb32 <IR_read+0x2e8>
     b28:	90 de       	rcall	.-736    	; 0x84a <IR_read>
     b2a:	bc 01       	movw	r22, r24
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <IR_read+0x2e8>
     b2e:	65 e9       	ldi	r22, 0x95	; 149
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	10 92 2e 02 	sts	0x022E, r1
     b36:	10 92 2d 02 	sts	0x022D, r1
     b3a:	86 2f       	mov	r24, r22
     b3c:	97 2f       	mov	r25, r23
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <oi_update_sensor>:
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	2f 97       	sbiw	r28, 0x0f	; 15
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	6c 01       	movw	r12, r24
     b6e:	80 91 9b 00 	lds	r24, 0x009B
     b72:	88 23       	and	r24, r24
     b74:	44 f4       	brge	.+16     	; 0xb86 <oi_update_sensor+0x42>
     b76:	ac e9       	ldi	r26, 0x9C	; 156
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	eb e9       	ldi	r30, 0x9B	; 155
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	8c 91       	ld	r24, X
     b80:	80 81       	ld	r24, Z
     b82:	88 23       	and	r24, r24
     b84:	e4 f3       	brlt	.-8      	; 0xb7e <oi_update_sensor+0x3a>
     b86:	8e e8       	ldi	r24, 0x8E	; 142
     b88:	31 d4       	rcall	.+2146   	; 0x13ec <oi_byte_tx>
     b8a:	87 e0       	ldi	r24, 0x07	; 7
     b8c:	2f d4       	rcall	.+2142   	; 0x13ec <oi_byte_tx>
     b8e:	8e e1       	ldi	r24, 0x1E	; 30
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	12 dd       	rcall	.-1500   	; 0x5b8 <wait_us>
     b94:	a1 d4       	rcall	.+2370   	; 0x14d8 <oi_byte_rx>
     b96:	f6 01       	movw	r30, r12
     b98:	90 81       	ld	r25, Z
     b9a:	80 fb       	bst	r24, 0
     b9c:	90 f9       	bld	r25, 0
     b9e:	90 83       	st	Z, r25
     ba0:	8e e8       	ldi	r24, 0x8E	; 142
     ba2:	24 d4       	rcall	.+2120   	; 0x13ec <oi_byte_tx>
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	22 d4       	rcall	.+2116   	; 0x13ec <oi_byte_tx>
     ba8:	8e 01       	movw	r16, r28
     baa:	0f 5f       	subi	r16, 0xFF	; 255
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
     bae:	48 01       	movw	r8, r16
     bb0:	5e 01       	movw	r10, r28
     bb2:	f7 e0       	ldi	r31, 0x07	; 7
     bb4:	af 0e       	add	r10, r31
     bb6:	b1 1c       	adc	r11, r1
     bb8:	78 01       	movw	r14, r16
     bba:	8e d4       	rcall	.+2332   	; 0x14d8 <oi_byte_rx>
     bbc:	f7 01       	movw	r30, r14
     bbe:	81 93       	st	Z+, r24
     bc0:	7f 01       	movw	r14, r30
     bc2:	ea 15       	cp	r30, r10
     bc4:	fb 05       	cpc	r31, r11
     bc6:	c9 f7       	brne	.-14     	; 0xbba <oi_update_sensor+0x76>
     bc8:	8e e1       	ldi	r24, 0x1E	; 30
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	f5 dc       	rcall	.-1558   	; 0x5b8 <wait_us>
     bce:	9b 81       	ldd	r25, Y+3	; 0x03
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	82 0f       	add	r24, r18
     bd6:	91 1d       	adc	r25, r1
     bd8:	f6 01       	movw	r30, r12
     bda:	95 87       	std	Z+13, r25	; 0x0d
     bdc:	84 87       	std	Z+12, r24	; 0x0c
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	2e 81       	ldd	r18, Y+6	; 0x06
     be4:	82 0f       	add	r24, r18
     be6:	91 1d       	adc	r25, r1
     be8:	97 87       	std	Z+15, r25	; 0x0f
     bea:	86 87       	std	Z+14, r24	; 0x0e
     bec:	8e e8       	ldi	r24, 0x8E	; 142
     bee:	fe d3       	rcall	.+2044   	; 0x13ec <oi_byte_tx>
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	fc d3       	rcall	.+2040   	; 0x13ec <oi_byte_tx>
     bf4:	74 01       	movw	r14, r8
     bf6:	fe e0       	ldi	r31, 0x0E	; 14
     bf8:	ef 0e       	add	r14, r31
     bfa:	f1 1c       	adc	r15, r1
     bfc:	6d d4       	rcall	.+2266   	; 0x14d8 <oi_byte_rx>
     bfe:	f8 01       	movw	r30, r16
     c00:	81 93       	st	Z+, r24
     c02:	8f 01       	movw	r16, r30
     c04:	ee 15       	cp	r30, r14
     c06:	ff 05       	cpc	r31, r15
     c08:	c9 f7       	brne	.-14     	; 0xbfc <oi_update_sensor+0xb8>
     c0a:	8e e1       	ldi	r24, 0x1E	; 30
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	d4 dc       	rcall	.-1624   	; 0x5b8 <wait_us>
     c10:	99 81       	ldd	r25, Y+1	; 0x01
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	2a 81       	ldd	r18, Y+2	; 0x02
     c16:	82 0f       	add	r24, r18
     c18:	91 1d       	adc	r25, r1
     c1a:	f6 01       	movw	r30, r12
     c1c:	93 8f       	std	Z+27, r25	; 0x1b
     c1e:	82 8f       	std	Z+26, r24	; 0x1a
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	2c 81       	ldd	r18, Y+4	; 0x04
     c26:	82 0f       	add	r24, r18
     c28:	91 1d       	adc	r25, r1
     c2a:	95 8f       	std	Z+29, r25	; 0x1d
     c2c:	84 8f       	std	Z+28, r24	; 0x1c
     c2e:	9d 81       	ldd	r25, Y+5	; 0x05
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	2e 81       	ldd	r18, Y+6	; 0x06
     c34:	82 0f       	add	r24, r18
     c36:	91 1d       	adc	r25, r1
     c38:	97 8f       	std	Z+31, r25	; 0x1f
     c3a:	86 8f       	std	Z+30, r24	; 0x1e
     c3c:	9f 81       	ldd	r25, Y+7	; 0x07
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	28 85       	ldd	r18, Y+8	; 0x08
     c42:	82 0f       	add	r24, r18
     c44:	91 1d       	adc	r25, r1
     c46:	91 a3       	std	Z+33, r25	; 0x21
     c48:	80 a3       	std	Z+32, r24	; 0x20
     c4a:	99 85       	ldd	r25, Y+9	; 0x09
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c50:	82 0f       	add	r24, r18
     c52:	91 1d       	adc	r25, r1
     c54:	93 a3       	std	Z+35, r25	; 0x23
     c56:	82 a3       	std	Z+34, r24	; 0x22
     c58:	8e e1       	ldi	r24, 0x1E	; 30
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	7f dd       	rcall	.-1282   	; 0x75c <wait_ms>
     c5e:	2f 96       	adiw	r28, 0x0f	; 15
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	9f 90       	pop	r9
     c80:	8f 90       	pop	r8
     c82:	08 95       	ret

00000c84 <turn_counterclockwise>:
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	8c 01       	movw	r16, r24
     c96:	eb 01       	movw	r28, r22
     c98:	6e ec       	ldi	r22, 0xCE	; 206
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	82 e3       	ldi	r24, 0x32	; 50
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	e4 d3       	rcall	.+1992   	; 0x146a <oi_set_wheels>
     ca2:	be 01       	movw	r22, r28
     ca4:	88 27       	eor	r24, r24
     ca6:	77 fd       	sbrc	r23, 7
     ca8:	80 95       	com	r24
     caa:	98 2f       	mov	r25, r24
     cac:	e8 d5       	rcall	.+3024   	; 0x187e <__floatsisf>
     cae:	28 e4       	ldi	r18, 0x48	; 72
     cb0:	31 ee       	ldi	r19, 0xE1	; 225
     cb2:	4a e3       	ldi	r20, 0x3A	; 58
     cb4:	5f e3       	ldi	r21, 0x3F	; 63
     cb6:	97 d6       	rcall	.+3374   	; 0x19e6 <__mulsf3>
     cb8:	f6 2e       	mov	r15, r22
     cba:	e7 2e       	mov	r14, r23
     cbc:	d8 2e       	mov	r13, r24
     cbe:	c9 2e       	mov	r12, r25
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	8b d6       	rcall	.+3350   	; 0x19de <__gesf2>
     cc8:	18 16       	cp	r1, r24
     cca:	b4 f4       	brge	.+44     	; 0xcf8 <turn_counterclockwise+0x74>
     ccc:	c0 e0       	ldi	r28, 0x00	; 0
     cce:	d0 e0       	ldi	r29, 0x00	; 0
     cd0:	c8 01       	movw	r24, r16
     cd2:	38 df       	rcall	.-400    	; 0xb44 <oi_update_sensor>
     cd4:	f8 01       	movw	r30, r16
     cd6:	86 85       	ldd	r24, Z+14	; 0x0e
     cd8:	97 85       	ldd	r25, Z+15	; 0x0f
     cda:	c8 0f       	add	r28, r24
     cdc:	d9 1f       	adc	r29, r25
     cde:	be 01       	movw	r22, r28
     ce0:	88 27       	eor	r24, r24
     ce2:	77 fd       	sbrc	r23, 7
     ce4:	80 95       	com	r24
     ce6:	98 2f       	mov	r25, r24
     ce8:	ca d5       	rcall	.+2964   	; 0x187e <__floatsisf>
     cea:	2f 2d       	mov	r18, r15
     cec:	3e 2d       	mov	r19, r14
     cee:	4d 2d       	mov	r20, r13
     cf0:	5c 2d       	mov	r21, r12
     cf2:	26 d5       	rcall	.+2636   	; 0x1740 <__cmpsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	64 f3       	brlt	.-40     	; 0xcd0 <turn_counterclockwise+0x4c>
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	b4 d3       	rcall	.+1896   	; 0x146a <oi_set_wheels>
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <turn_clockwise>:
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	8c 01       	movw	r16, r24
     d26:	eb 01       	movw	r28, r22
     d28:	62 e3       	ldi	r22, 0x32	; 50
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	8e ec       	ldi	r24, 0xCE	; 206
     d2e:	9f ef       	ldi	r25, 0xFF	; 255
     d30:	9c d3       	rcall	.+1848   	; 0x146a <oi_set_wheels>
     d32:	66 27       	eor	r22, r22
     d34:	77 27       	eor	r23, r23
     d36:	6c 1b       	sub	r22, r28
     d38:	7d 0b       	sbc	r23, r29
     d3a:	88 27       	eor	r24, r24
     d3c:	77 fd       	sbrc	r23, 7
     d3e:	80 95       	com	r24
     d40:	98 2f       	mov	r25, r24
     d42:	9d d5       	rcall	.+2874   	; 0x187e <__floatsisf>
     d44:	28 e4       	ldi	r18, 0x48	; 72
     d46:	31 ee       	ldi	r19, 0xE1	; 225
     d48:	4a e3       	ldi	r20, 0x3A	; 58
     d4a:	5f e3       	ldi	r21, 0x3F	; 63
     d4c:	4c d6       	rcall	.+3224   	; 0x19e6 <__mulsf3>
     d4e:	f6 2e       	mov	r15, r22
     d50:	e7 2e       	mov	r14, r23
     d52:	d8 2e       	mov	r13, r24
     d54:	c9 2e       	mov	r12, r25
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	a9 01       	movw	r20, r18
     d5c:	f1 d4       	rcall	.+2530   	; 0x1740 <__cmpsf2>
     d5e:	88 23       	and	r24, r24
     d60:	b4 f4       	brge	.+44     	; 0xd8e <turn_clockwise+0x7a>
     d62:	c0 e0       	ldi	r28, 0x00	; 0
     d64:	d0 e0       	ldi	r29, 0x00	; 0
     d66:	c8 01       	movw	r24, r16
     d68:	ed de       	rcall	.-550    	; 0xb44 <oi_update_sensor>
     d6a:	f8 01       	movw	r30, r16
     d6c:	86 85       	ldd	r24, Z+14	; 0x0e
     d6e:	97 85       	ldd	r25, Z+15	; 0x0f
     d70:	c8 0f       	add	r28, r24
     d72:	d9 1f       	adc	r29, r25
     d74:	be 01       	movw	r22, r28
     d76:	88 27       	eor	r24, r24
     d78:	77 fd       	sbrc	r23, 7
     d7a:	80 95       	com	r24
     d7c:	98 2f       	mov	r25, r24
     d7e:	7f d5       	rcall	.+2814   	; 0x187e <__floatsisf>
     d80:	2f 2d       	mov	r18, r15
     d82:	3e 2d       	mov	r19, r14
     d84:	4d 2d       	mov	r20, r13
     d86:	5c 2d       	mov	r21, r12
     d88:	2a d6       	rcall	.+3156   	; 0x19de <__gesf2>
     d8a:	18 16       	cp	r1, r24
     d8c:	64 f3       	brlt	.-40     	; 0xd66 <turn_clockwise+0x52>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	69 d3       	rcall	.+1746   	; 0x146a <oi_set_wheels>
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	08 95       	ret

00000daa <finish_song_light>:
     daa:	6f 92       	push	r6
     dac:	7f 92       	push	r7
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	c0 58       	subi	r28, 0x80	; 128
     dc8:	d1 09       	sbc	r29, r1
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	e6 e1       	ldi	r30, 0x16	; 22
     dd8:	f1 e0       	ldi	r31, 0x01	; 1
     dda:	de 01       	movw	r26, r28
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	01 90       	ld	r0, Z+
     de0:	0d 92       	st	X+, r0
     de2:	8a 95       	dec	r24
     de4:	e1 f7       	brne	.-8      	; 0xdde <finish_song_light+0x34>
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	e6 e2       	ldi	r30, 0x26	; 38
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	de 01       	movw	r26, r28
     dee:	51 96       	adiw	r26, 0x11	; 17
     df0:	01 90       	ld	r0, Z+
     df2:	0d 92       	st	X+, r0
     df4:	8a 95       	dec	r24
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <finish_song_light+0x46>
     df8:	80 e1       	ldi	r24, 0x10	; 16
     dfa:	e6 e3       	ldi	r30, 0x36	; 54
     dfc:	f1 e0       	ldi	r31, 0x01	; 1
     dfe:	de 01       	movw	r26, r28
     e00:	91 96       	adiw	r26, 0x21	; 33
     e02:	01 90       	ld	r0, Z+
     e04:	0d 92       	st	X+, r0
     e06:	8a 95       	dec	r24
     e08:	e1 f7       	brne	.-8      	; 0xe02 <finish_song_light+0x58>
     e0a:	80 e1       	ldi	r24, 0x10	; 16
     e0c:	e6 e4       	ldi	r30, 0x46	; 70
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	de 01       	movw	r26, r28
     e12:	d1 96       	adiw	r26, 0x31	; 49
     e14:	01 90       	ld	r0, Z+
     e16:	0d 92       	st	X+, r0
     e18:	8a 95       	dec	r24
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <finish_song_light+0x6a>
     e1c:	80 e1       	ldi	r24, 0x10	; 16
     e1e:	e6 e5       	ldi	r30, 0x56	; 86
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	de 01       	movw	r26, r28
     e24:	af 5b       	subi	r26, 0xBF	; 191
     e26:	bf 4f       	sbci	r27, 0xFF	; 255
     e28:	01 90       	ld	r0, Z+
     e2a:	0d 92       	st	X+, r0
     e2c:	8a 95       	dec	r24
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <finish_song_light+0x7e>
     e30:	80 e1       	ldi	r24, 0x10	; 16
     e32:	e6 e6       	ldi	r30, 0x66	; 102
     e34:	f1 e0       	ldi	r31, 0x01	; 1
     e36:	de 01       	movw	r26, r28
     e38:	af 5a       	subi	r26, 0xAF	; 175
     e3a:	bf 4f       	sbci	r27, 0xFF	; 255
     e3c:	01 90       	ld	r0, Z+
     e3e:	0d 92       	st	X+, r0
     e40:	8a 95       	dec	r24
     e42:	e1 f7       	brne	.-8      	; 0xe3c <finish_song_light+0x92>
     e44:	80 e1       	ldi	r24, 0x10	; 16
     e46:	e6 e7       	ldi	r30, 0x76	; 118
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	de 01       	movw	r26, r28
     e4c:	af 59       	subi	r26, 0x9F	; 159
     e4e:	bf 4f       	sbci	r27, 0xFF	; 255
     e50:	01 90       	ld	r0, Z+
     e52:	0d 92       	st	X+, r0
     e54:	8a 95       	dec	r24
     e56:	e1 f7       	brne	.-8      	; 0xe50 <finish_song_light+0xa6>
     e58:	80 e1       	ldi	r24, 0x10	; 16
     e5a:	e6 e8       	ldi	r30, 0x86	; 134
     e5c:	f1 e0       	ldi	r31, 0x01	; 1
     e5e:	de 01       	movw	r26, r28
     e60:	af 58       	subi	r26, 0x8F	; 143
     e62:	bf 4f       	sbci	r27, 0xFF	; 255
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	8a 95       	dec	r24
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <finish_song_light+0xba>
     e6c:	9e 01       	movw	r18, r28
     e6e:	2f 5e       	subi	r18, 0xEF	; 239
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	ae 01       	movw	r20, r28
     e74:	4f 5f       	subi	r20, 0xFF	; 255
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	60 e1       	ldi	r22, 0x10	; 16
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	c5 d2       	rcall	.+1418   	; 0x140c <oi_load_song>
     e82:	9e 01       	movw	r18, r28
     e84:	2f 5c       	subi	r18, 0xCF	; 207
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	ae 01       	movw	r20, r28
     e8a:	4f 5d       	subi	r20, 0xDF	; 223
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	60 e1       	ldi	r22, 0x10	; 16
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	ba d2       	rcall	.+1396   	; 0x140c <oi_load_song>
     e98:	9e 01       	movw	r18, r28
     e9a:	2f 5a       	subi	r18, 0xAF	; 175
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	ae 01       	movw	r20, r28
     ea0:	4f 5b       	subi	r20, 0xBF	; 191
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	60 e1       	ldi	r22, 0x10	; 16
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	af d2       	rcall	.+1374   	; 0x140c <oi_load_song>
     eae:	9e 01       	movw	r18, r28
     eb0:	2f 58       	subi	r18, 0x8F	; 143
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	ae 01       	movw	r20, r28
     eb6:	4f 59       	subi	r20, 0x9F	; 159
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	60 e1       	ldi	r22, 0x10	; 16
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a4 d2       	rcall	.+1352   	; 0x140c <oi_load_song>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	99 d2       	rcall	.+1330   	; 0x13fc <oi_play_song>
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	46 dc       	rcall	.-1908   	; 0x75c <wait_ms>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	93 d2       	rcall	.+1318   	; 0x13fc <oi_play_song>
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	40 dc       	rcall	.-1920   	; 0x75c <wait_ms>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8d d2       	rcall	.+1306   	; 0x13fc <oi_play_song>
     ee2:	80 e4       	ldi	r24, 0x40	; 64
     ee4:	96 e0       	ldi	r25, 0x06	; 6
     ee6:	3a dc       	rcall	.-1932   	; 0x75c <wait_ms>
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	87 d2       	rcall	.+1294   	; 0x13fc <oi_play_song>
     eee:	0f 2e       	mov	r0, r31
     ef0:	f2 e3       	ldi	r31, 0x32	; 50
     ef2:	6f 2e       	mov	r6, r31
     ef4:	71 2c       	mov	r7, r1
     ef6:	f0 2d       	mov	r31, r0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	aa 24       	eor	r10, r10
     efe:	aa 94       	dec	r10
     f00:	c1 2c       	mov	r12, r1
     f02:	d1 2c       	mov	r13, r1
     f04:	91 2c       	mov	r9, r1
     f06:	ee 24       	eor	r14, r14
     f08:	e3 94       	inc	r14
     f0a:	f1 2c       	mov	r15, r1
     f0c:	89 2b       	or	r24, r25
     f0e:	71 f4       	brne	.+28     	; 0xf2c <finish_song_light+0x182>
     f10:	19 2d       	mov	r17, r9
     f12:	2a 2d       	mov	r18, r10
     f14:	41 2f       	mov	r20, r17
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	be d2       	rcall	.+1404   	; 0x1498 <oi_set_leds>
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	1d dc       	rcall	.-1990   	; 0x75c <wait_ms>
     f22:	1f 5f       	subi	r17, 0xFF	; 255
     f24:	1f 3f       	cpi	r17, 0xFF	; 255
     f26:	a9 f7       	brne	.-22     	; 0xf12 <finish_song_light+0x168>
     f28:	c7 01       	movw	r24, r14
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <finish_song_light+0x19a>
     f2c:	ba 2c       	mov	r11, r10
     f2e:	2a 2d       	mov	r18, r10
     f30:	4b 2d       	mov	r20, r11
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	b0 d2       	rcall	.+1376   	; 0x1498 <oi_set_leds>
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0f dc       	rcall	.-2018   	; 0x75c <wait_ms>
     f3e:	ba 94       	dec	r11
     f40:	b1 f7       	brne	.-20     	; 0xf2e <finish_song_light+0x184>
     f42:	c6 01       	movw	r24, r12
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	62 1a       	sub	r6, r18
     f48:	71 08       	sbc	r7, r1
     f4a:	01 f7       	brne	.-64     	; 0xf0c <finish_song_light+0x162>
     f4c:	c0 58       	subi	r28, 0x80	; 128
     f4e:	df 4f       	sbci	r29, 0xFF	; 255
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	7f 90       	pop	r7
     f70:	6f 90       	pop	r6
     f72:	08 95       	ret

00000f74 <USART_Receive>:
     f74:	cf 93       	push	r28
     f76:	5f 9b       	sbis	0x0b, 7	; 11
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <USART_Receive+0x2>
     f7a:	cc b1       	in	r28, 0x0c	; 12
     f7c:	1f 92       	push	r1
     f7e:	cf 93       	push	r28
     f80:	2c e9       	ldi	r18, 0x9C	; 156
     f82:	31 e0       	ldi	r19, 0x01	; 1
     f84:	3f 93       	push	r19
     f86:	2f 93       	push	r18
     f88:	28 d9       	rcall	.-3504   	; 0x1da <lprintf>
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	8c 2f       	mov	r24, r28
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <USART_TransmitNoSignedIssues>:
}

void USART_TransmitNoSignedIssues( char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE) ) );
     f98:	5d 9b       	sbis	0x0b, 5	; 11
     f9a:	fe cf       	rjmp	.-4      	; 0xf98 <USART_TransmitNoSignedIssues>
	
	char lower = data & 0x0f;
     f9c:	98 2f       	mov	r25, r24
     f9e:	9f 70       	andi	r25, 0x0F	; 15
	
	/* Put data into buffer, sends the data */
	UDR0 = lower;
     fa0:	9c b9       	out	0x0c, r25	; 12
	
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE) ) );
     fa2:	5d 9b       	sbis	0x0b, 5	; 11
     fa4:	fe cf       	rjmp	.-4      	; 0xfa2 <USART_TransmitNoSignedIssues+0xa>
	
	char higher = ( data >> 4 ) & 0x0f;
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
	
	/* Put data into buffer, sends the data */
	UDR0 = higher;
     faa:	8c b9       	out	0x0c, r24	; 12
     fac:	08 95       	ret

00000fae <USART_Transmit_NoSignedIssues_Buffer>:
	UDR0 = data;// Put data into buffer, sends the data
}


void USART_Transmit_NoSignedIssues_Buffer( unsigned char *data, int length )
{
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
	for( int i = 0; i < length; ++i )
     fb6:	16 16       	cp	r1, r22
     fb8:	17 06       	cpc	r1, r23
     fba:	54 f4       	brge	.+20     	; 0xfd0 <USART_Transmit_NoSignedIssues_Buffer+0x22>
     fbc:	c8 2f       	mov	r28, r24
     fbe:	d9 2f       	mov	r29, r25
	while ( ( UCSR0A & (0b00100000)) == 0 );// Wait for empty transmit buffer
	UDR0 = data;// Put data into buffer, sends the data
}


void USART_Transmit_NoSignedIssues_Buffer( unsigned char *data, int length )
     fc0:	8e 01       	movw	r16, r28
     fc2:	06 0f       	add	r16, r22
     fc4:	17 1f       	adc	r17, r23
{
	for( int i = 0; i < length; ++i )
	{
		USART_TransmitNoSignedIssues( data[i] );
     fc6:	89 91       	ld	r24, Y+
     fc8:	e7 df       	rcall	.-50     	; 0xf98 <USART_TransmitNoSignedIssues>
}


void USART_Transmit_NoSignedIssues_Buffer( unsigned char *data, int length )
{
	for( int i = 0; i < length; ++i )
     fca:	c0 17       	cp	r28, r16
     fcc:	d1 07       	cpc	r29, r17
     fce:	d9 f7       	brne	.-10     	; 0xfc6 <USART_Transmit_NoSignedIssues_Buffer+0x18>
	{
		USART_TransmitNoSignedIssues( data[i] );
	}
	
	lprintf( "sent buffer" );
     fd0:	82 ea       	ldi	r24, 0xA2	; 162
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	9f 93       	push	r25
     fd6:	8f 93       	push	r24
     fd8:	00 d9       	rcall	.-3584   	; 0x1da <lprintf>
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <sensor_check>:
	}
}


void sensor_check(oi_t*sensor_data, int send)
{
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	dc 01       	movw	r26, r24
	//reset the string to an empty format
	status_string[0] = 's';
     ff0:	83 e7       	ldi	r24, 0x73	; 115
     ff2:	80 93 b3 03 	sts	0x03B3, r24
     ff6:	e4 eb       	ldi	r30, 0xB4	; 180
     ff8:	f3 e0       	ldi	r31, 0x03	; 3
		}
	}
}


void sensor_check(oi_t*sensor_data, int send)
     ffa:	2f eb       	ldi	r18, 0xBF	; 191
     ffc:	33 e0       	ldi	r19, 0x03	; 3
{
	//reset the string to an empty format
	status_string[0] = 's';
	for( int i = 1; i < 12; ++i )
	{
		status_string[i] = 0;
     ffe:	11 92       	st	Z+, r1

void sensor_check(oi_t*sensor_data, int send)
{
	//reset the string to an empty format
	status_string[0] = 's';
	for( int i = 1; i < 12; ++i )
    1000:	e2 17       	cp	r30, r18
    1002:	f3 07       	cpc	r31, r19
    1004:	e1 f7       	brne	.-8      	; 0xffe <sensor_check+0x16>
	8: Cliff Right
	*/
	
	// set the bits for the toggle buttons
	
	if (sensor_data->bumper_left)
    1006:	8c 91       	ld	r24, X
    1008:	81 ff       	sbrs	r24, 1
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <sensor_check+0x2e>
	{	status_string[1] |= (1<<0);
    100c:	e4 eb       	ldi	r30, 0xB4	; 180
    100e:	f3 e0       	ldi	r31, 0x03	; 3
    1010:	80 81       	ld	r24, Z
    1012:	81 60       	ori	r24, 0x01	; 1
    1014:	80 83       	st	Z, r24
	}
	
	if (sensor_data->bumper_right)
    1016:	8c 91       	ld	r24, X
    1018:	80 ff       	sbrs	r24, 0
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <sensor_check+0x3e>
	{	status_string[1] |= (1<<1);
    101c:	e4 eb       	ldi	r30, 0xB4	; 180
    101e:	f3 e0       	ldi	r31, 0x03	; 3
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	80 83       	st	Z, r24
	}
	
	if (((sensor_data->cliff_left_signal) < (CLIFF_L))||(sensor_data->cliff_left_signal > (WHITE_L)))
    1026:	5c 96       	adiw	r26, 0x1c	; 28
    1028:	2d 91       	ld	r18, X+
    102a:	3c 91       	ld	r19, X
    102c:	5d 97       	sbiw	r26, 0x1d	; 29
    102e:	c9 01       	movw	r24, r18
    1030:	0a 97       	sbiw	r24, 0x0a	; 10
    1032:	8f 34       	cpi	r24, 0x4F	; 79
    1034:	92 40       	sbci	r25, 0x02	; 2
    1036:	28 f0       	brcs	.+10     	; 0x1042 <sensor_check+0x5a>
	{	status_string[1] |= (1<<2);
    1038:	e4 eb       	ldi	r30, 0xB4	; 180
    103a:	f3 e0       	ldi	r31, 0x03	; 3
    103c:	80 81       	ld	r24, Z
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	80 83       	st	Z, r24
	}
	
	if ((sensor_data->cliff_frontleft_signal < CLIFF_L)||(sensor_data->cliff_frontleft_signal > WHITE_L))
    1042:	5e 96       	adiw	r26, 0x1e	; 30
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	5f 97       	sbiw	r26, 0x1f	; 31
    104a:	cf 01       	movw	r24, r30
    104c:	0a 97       	sbiw	r24, 0x0a	; 10
    104e:	8f 34       	cpi	r24, 0x4F	; 79
    1050:	92 40       	sbci	r25, 0x02	; 2
    1052:	28 f0       	brcs	.+10     	; 0x105e <sensor_check+0x76>
	{	status_string[1] |= (1<<3);
    1054:	c4 eb       	ldi	r28, 0xB4	; 180
    1056:	d3 e0       	ldi	r29, 0x03	; 3
    1058:	88 81       	ld	r24, Y
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	88 83       	st	Y, r24
	}
	
	if ((sensor_data->cliff_frontright_signal < CLIFF_R)||(sensor_data->cliff_frontright_signal > WHITE_R))
    105e:	90 96       	adiw	r26, 0x20	; 32
    1060:	4d 91       	ld	r20, X+
    1062:	5c 91       	ld	r21, X
    1064:	91 97       	sbiw	r26, 0x21	; 33
    1066:	ca 01       	movw	r24, r20
    1068:	0a 97       	sbiw	r24, 0x0a	; 10
    106a:	8f 34       	cpi	r24, 0x4F	; 79
    106c:	92 40       	sbci	r25, 0x02	; 2
    106e:	28 f0       	brcs	.+10     	; 0x107a <sensor_check+0x92>
	{	status_string[1] |= (1<<4);
    1070:	c4 eb       	ldi	r28, 0xB4	; 180
    1072:	d3 e0       	ldi	r29, 0x03	; 3
    1074:	88 81       	ld	r24, Y
    1076:	80 61       	ori	r24, 0x10	; 16
    1078:	88 83       	st	Y, r24
	}
	
	if ((sensor_data->cliff_right_signal < CLIFF_R)||(sensor_data->cliff_right_signal > WHITE_R))
    107a:	92 96       	adiw	r26, 0x22	; 34
    107c:	8d 91       	ld	r24, X+
    107e:	9c 91       	ld	r25, X
    1080:	93 97       	sbiw	r26, 0x23	; 35
    1082:	ec 01       	movw	r28, r24
    1084:	2a 97       	sbiw	r28, 0x0a	; 10
    1086:	cf 34       	cpi	r28, 0x4F	; 79
    1088:	d2 40       	sbci	r29, 0x02	; 2
    108a:	28 f0       	brcs	.+10     	; 0x1096 <sensor_check+0xae>
	{	status_string[1] |= (1<<5);
    108c:	c4 eb       	ldi	r28, 0xB4	; 180
    108e:	d3 e0       	ldi	r29, 0x03	; 3
    1090:	18 81       	ld	r17, Y
    1092:	10 62       	ori	r17, 0x20	; 32
    1094:	18 83       	st	Y, r17
	}

	if (sensor_data->wheeldrop_left)
    1096:	cc 91       	ld	r28, X
    1098:	c3 ff       	sbrs	r28, 3
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <sensor_check+0xbe>
	{	status_string[1] |= (1<<6);
    109c:	c4 eb       	ldi	r28, 0xB4	; 180
    109e:	d3 e0       	ldi	r29, 0x03	; 3
    10a0:	18 81       	ld	r17, Y
    10a2:	10 64       	ori	r17, 0x40	; 64
    10a4:	18 83       	st	Y, r17
	}

	if (sensor_data->wheeldrop_caster)
    10a6:	cc 91       	ld	r28, X
    10a8:	c4 ff       	sbrs	r28, 4
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <sensor_check+0xce>
	{	status_string[1] |= (1<<7);
    10ac:	c4 eb       	ldi	r28, 0xB4	; 180
    10ae:	d3 e0       	ldi	r29, 0x03	; 3
    10b0:	18 81       	ld	r17, Y
    10b2:	10 68       	ori	r17, 0x80	; 128
    10b4:	18 83       	st	Y, r17
	}

	if (sensor_data->wheeldrop_right)
    10b6:	ac 91       	ld	r26, X
    10b8:	a2 ff       	sbrs	r26, 2
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <sensor_check+0xde>
	{	status_string[2] |= 1;
    10bc:	a5 eb       	ldi	r26, 0xB5	; 181
    10be:	b3 e0       	ldi	r27, 0x03	; 3
    10c0:	cc 91       	ld	r28, X
    10c2:	c1 60       	ori	r28, 0x01	; 1
    10c4:	cc 93       	st	X, r28
	}
	
	//set the int values for cliff signal detectors
	unsigned int val = sensor_data->cliff_frontleft_signal;
	status_string[4] = val & 0xff;
    10c6:	e0 93 b7 03 	sts	0x03B7, r30
	status_string[3] = ( val >> 8 ) & 0xff;
    10ca:	f0 93 b6 03 	sts	0x03B6, r31
	
	val = sensor_data->cliff_frontright_signal;
	status_string[6] = val & 0xff;
    10ce:	40 93 b9 03 	sts	0x03B9, r20
	status_string[5] = ( val >> 8 ) & 0xff;
    10d2:	50 93 b8 03 	sts	0x03B8, r21
	
	val = sensor_data->cliff_left_signal;
	status_string[8] = val & 0xff;
    10d6:	20 93 bb 03 	sts	0x03BB, r18
	status_string[7] = ( val >> 8 ) & 0xff;
    10da:	30 93 ba 03 	sts	0x03BA, r19
	
	val = sensor_data->cliff_right_signal;
	status_string[10] = val & 0xff;
    10de:	80 93 bd 03 	sts	0x03BD, r24
	status_string[9] = ( val >> 8 ) & 0xff;
    10e2:	90 93 bc 03 	sts	0x03BC, r25
	
	if( send )
    10e6:	67 2b       	or	r22, r23
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <sensor_check+0x10c>
	{
		USART_Transmit_NoSignedIssues_Buffer( status_string, 12 );
    10ea:	6c e0       	ldi	r22, 0x0C	; 12
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	83 eb       	ldi	r24, 0xB3	; 179
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	5d df       	rcall	.-326    	; 0xfae <USART_Transmit_NoSignedIssues_Buffer>
	}
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	08 95       	ret

000010fc <env_scan>:
// 		//lprintf("Distance:%f cm", data_IR2[i]);
// 	}
// }

void env_scan(void)
{	//Print set of distance measurements at each angle
    10fc:	6f 92       	push	r6
    10fe:	7f 92       	push	r7
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	c6 5b       	subi	r28, 0xB6	; 182
    111e:	d1 09       	sbc	r29, r1
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
	//unsigned char scanbuf[12] = { 'd', ' ', 'r', 'e', 's', 'e', 't', ' ', ' ', ' ', ' ', ' ' };
	unsigned char scanbuf[182];
	//lprintf( "sending: reset" );
	//USART_Transmit_NoSignedIssues_Buffer( scanbuf );
	//wait_ms( 2000 );
	scanbuf[0] = 'd';
    112a:	84 e6       	ldi	r24, 0x64	; 100
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	0f 2e       	mov	r0, r31
    1130:	ff e9       	ldi	r31, 0x9F	; 159
    1132:	8f 2e       	mov	r8, r31
    1134:	f7 e0       	ldi	r31, 0x07	; 7
    1136:	9f 2e       	mov	r9, r31
    1138:	f0 2d       	mov	r31, r0
    113a:	0f 2e       	mov	r0, r31
    113c:	f4 e4       	ldi	r31, 0x44	; 68
    113e:	ef 2e       	mov	r14, r31
    1140:	f2 e0       	ldi	r31, 0x02	; 2
    1142:	ff 2e       	mov	r15, r31
    1144:	f0 2d       	mov	r31, r0
    1146:	5e 01       	movw	r10, r28
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	a8 0e       	add	r10, r24
    114c:	b1 1c       	adc	r11, r1
	
	for(int i=0;i<181;i++)//fills array one
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	10 e0       	ldi	r17, 0x00	; 0
	{
		//scanbuf[2] = 180 - i;
		Servo(i);
		lprintf("iter:%3u", i);
    1152:	0f 2e       	mov	r0, r31
    1154:	fe ea       	ldi	r31, 0xAE	; 174
    1156:	cf 2e       	mov	r12, r31
    1158:	f1 e0       	ldi	r31, 0x01	; 1
    115a:	df 2e       	mov	r13, r31
    115c:	f0 2d       	mov	r31, r0
		{
			data_IR[i] = IR_read();
		}
		else
		{
			data_IR[i] = 100;
    115e:	0f 2e       	mov	r0, r31
    1160:	f4 e6       	ldi	r31, 0x64	; 100
    1162:	6f 2e       	mov	r6, r31
    1164:	71 2c       	mov	r7, r1
    1166:	f0 2d       	mov	r31, r0
	scanbuf[0] = 'd';
	
	for(int i=0;i<181;i++)//fills array one
	{
		//scanbuf[2] = 180 - i;
		Servo(i);
    1168:	c8 01       	movw	r24, r16
    116a:	0e db       	rcall	.-2532   	; 0x788 <Servo>
		lprintf("iter:%3u", i);
    116c:	1f 93       	push	r17
    116e:	0f 93       	push	r16
    1170:	df 92       	push	r13
    1172:	cf 92       	push	r12
    1174:	32 d8       	rcall	.-3996   	; 0x1da <lprintf>
		data_ping[i] = ping_read();
    1176:	3f da       	rcall	.-2946   	; 0x5f6 <ping_read>
    1178:	f4 01       	movw	r30, r8
    117a:	61 93       	st	Z+, r22
    117c:	71 93       	st	Z+, r23
    117e:	81 93       	st	Z+, r24
    1180:	91 93       	st	Z+, r25
    1182:	4f 01       	movw	r8, r30
		
		if (data_ping[i] < 50)
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	48 e4       	ldi	r20, 0x48	; 72
    1192:	52 e4       	ldi	r21, 0x42	; 66
    1194:	d5 d2       	rcall	.+1450   	; 0x1740 <__cmpsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <__stack+0xa5>
		{
			data_IR[i] = IR_read();
    119a:	57 db       	rcall	.-2386   	; 0x84a <IR_read>
    119c:	f7 01       	movw	r30, r14
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <__stack+0xab>
		}
		else
		{
			data_IR[i] = 100;
    11a4:	f7 01       	movw	r30, r14
    11a6:	71 82       	std	Z+1, r7	; 0x01
    11a8:	60 82       	st	Z, r6
		}
		
		scanbuf[i + 1] = data_IR[i];
    11aa:	0f 5f       	subi	r16, 0xFF	; 255
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	f7 01       	movw	r30, r14
    11b0:	80 81       	ld	r24, Z
    11b2:	f2 e0       	ldi	r31, 0x02	; 2
    11b4:	ef 0e       	add	r14, r31
    11b6:	f1 1c       	adc	r15, r1
    11b8:	f5 01       	movw	r30, r10
    11ba:	81 93       	st	Z+, r24
    11bc:	5f 01       	movw	r10, r30
	//lprintf( "sending: reset" );
	//USART_Transmit_NoSignedIssues_Buffer( scanbuf );
	//wait_ms( 2000 );
	scanbuf[0] = 'd';
	
	for(int i=0;i<181;i++)//fills array one
    11be:	05 3b       	cpi	r16, 0xB5	; 181
    11c0:	11 05       	cpc	r17, r1
    11c2:	91 f6       	brne	.-92     	; 0x1168 <__stack+0x69>
		//unsigned char lower_byte = data_IR[i] & 0xff;
		//unsigned char higher_byte = ( data_IR[i] >> 8 ) & 0xff;
		//scanbuf[3] = lower_byte;
		//scanbuf[4] = higher_byte;
	}
	USART_Transmit_NoSignedIssues_Buffer( scanbuf, 182 );
    11c4:	66 eb       	ldi	r22, 0xB6	; 182
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	f0 de       	rcall	.-544    	; 0xfae <USART_Transmit_NoSignedIssues_Buffer>
}
    11ce:	ca 54       	subi	r28, 0x4A	; 74
    11d0:	df 4f       	sbci	r29, 0xFF	; 255
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	7f 90       	pop	r7
    11f6:	6f 90       	pop	r6
    11f8:	08 95       	ret

000011fa <move>:
	}
	oi_set_wheels(0, 0); // stop
}

void move(oi_t *sensor_data, int mm, int speed)
{	    if (mm > 0)
    11fa:	6f 92       	push	r6
    11fc:	7f 92       	push	r7
    11fe:	8f 92       	push	r8
    1200:	9f 92       	push	r9
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	8c 01       	movw	r16, r24
    1218:	eb 01       	movw	r28, r22
    121a:	ca 01       	movw	r24, r20
    121c:	1c 16       	cp	r1, r28
    121e:	1d 06       	cpc	r1, r29
    1220:	3c f4       	brge	.+14     	; 0x1230 <move+0x36>
	LCDDisp = "Forward";
    1222:	27 eb       	ldi	r18, 0xB7	; 183
    1224:	31 e0       	ldi	r19, 0x01	; 1
    1226:	30 93 07 01 	sts	0x0107, r19
    122a:	20 93 06 01 	sts	0x0106, r18
    122e:	06 c0       	rjmp	.+12     	; 0x123c <move+0x42>
	else
	LCDDisp = "Reverse";
    1230:	2f eb       	ldi	r18, 0xBF	; 191
    1232:	31 e0       	ldi	r19, 0x01	; 1
    1234:	30 93 07 01 	sts	0x0107, r19
    1238:	20 93 06 01 	sts	0x0106, r18
	if ((mm < 0) && (speed > 0)) //if reverse, and positive speed, make negative to go reverse
    123c:	dd 23       	and	r29, r29
    123e:	5c f4       	brge	.+22     	; 0x1256 <move+0x5c>
    1240:	9c 01       	movw	r18, r24
    1242:	99 23       	and	r25, r25
    1244:	24 f4       	brge	.+8      	; 0x124e <move+0x54>
    1246:	22 27       	eor	r18, r18
    1248:	33 27       	eor	r19, r19
    124a:	28 1b       	sub	r18, r24
    124c:	39 0b       	sbc	r19, r25
    124e:	88 27       	eor	r24, r24
    1250:	99 27       	eor	r25, r25
    1252:	82 1b       	sub	r24, r18
    1254:	93 0b       	sbc	r25, r19
	speed = -speed;
	
	oi_set_wheels(speed, speed); // move forward at user defined speed
    1256:	bc 01       	movw	r22, r24
    1258:	08 d1       	rcall	.+528    	; 0x146a <oi_set_wheels>
	int sum = 0;
	mm = abs(mm);
    125a:	6e 01       	movw	r12, r28
    125c:	dd 23       	and	r29, r29
    125e:	24 f4       	brge	.+8      	; 0x1268 <move+0x6e>
    1260:	cc 24       	eor	r12, r12
    1262:	dd 24       	eor	r13, r13
    1264:	cc 1a       	sub	r12, r28
    1266:	dd 0a       	sbc	r13, r29
	while (sum < mm) //while travel is not complete, check for distance
    1268:	1c 14       	cp	r1, r12
    126a:	1d 04       	cpc	r1, r13
    126c:	0c f0       	brlt	.+2      	; 0x1270 <move+0x76>
    126e:	59 c0       	rjmp	.+178    	; 0x1322 <move+0x128>
	LCDDisp = "Reverse";
	if ((mm < 0) && (speed > 0)) //if reverse, and positive speed, make negative to go reverse
	speed = -speed;
	
	oi_set_wheels(speed, speed); // move forward at user defined speed
	int sum = 0;
    1270:	c0 e0       	ldi	r28, 0x00	; 0
    1272:	d0 e0       	ldi	r29, 0x00	; 0
	{   oi_update_sensor(sensor_data);
		sum += abs(sensor_data->distance);
		
		//call sensor check to recalculate the sensor choices
		sensor_check(sensor_data, 0);
		unsigned int check = status_string[1] | ( status_string[2] << 8 );
    1274:	0f 2e       	mov	r0, r31
    1276:	f5 eb       	ldi	r31, 0xB5	; 181
    1278:	af 2e       	mov	r10, r31
    127a:	f3 e0       	ldi	r31, 0x03	; 3
    127c:	bf 2e       	mov	r11, r31
    127e:	f0 2d       	mov	r31, r0
    1280:	0f 2e       	mov	r0, r31
    1282:	f4 eb       	ldi	r31, 0xB4	; 180
    1284:	8f 2e       	mov	r8, r31
    1286:	f3 e0       	ldi	r31, 0x03	; 3
    1288:	9f 2e       	mov	r9, r31
    128a:	f0 2d       	mov	r31, r0
			*/
			
			move_backward(sensor_data, 50);
			break;
		}
		lprintf("%s %d mm", LCDDisp, sum);
    128c:	0f 2e       	mov	r0, r31
    128e:	f7 ec       	ldi	r31, 0xC7	; 199
    1290:	6f 2e       	mov	r6, r31
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	7f 2e       	mov	r7, r31
    1296:	f0 2d       	mov	r31, r0
	
	oi_set_wheels(speed, speed); // move forward at user defined speed
	int sum = 0;
	mm = abs(mm);
	while (sum < mm) //while travel is not complete, check for distance
	{   oi_update_sensor(sensor_data);
    1298:	c8 01       	movw	r24, r16
    129a:	54 dc       	rcall	.-1880   	; 0xb44 <oi_update_sensor>
		sum += abs(sensor_data->distance);
    129c:	f8 01       	movw	r30, r16
    129e:	84 85       	ldd	r24, Z+12	; 0x0c
    12a0:	95 85       	ldd	r25, Z+13	; 0x0d
    12a2:	99 23       	and	r25, r25
    12a4:	1c f4       	brge	.+6      	; 0x12ac <move+0xb2>
    12a6:	91 95       	neg	r25
    12a8:	81 95       	neg	r24
    12aa:	91 09       	sbc	r25, r1
    12ac:	c8 0f       	add	r28, r24
    12ae:	d9 1f       	adc	r29, r25
		
		//call sensor check to recalculate the sensor choices
		sensor_check(sensor_data, 0);
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	c8 01       	movw	r24, r16
    12b6:	98 de       	rcall	.-720    	; 0xfe8 <sensor_check>
		unsigned int check = status_string[1] | ( status_string[2] << 8 );
    12b8:	f5 01       	movw	r30, r10
    12ba:	f0 80       	ld	r15, Z
    12bc:	e1 2c       	mov	r14, r1
    12be:	f4 01       	movw	r30, r8
    12c0:	80 81       	ld	r24, Z
    12c2:	97 01       	movw	r18, r14
    12c4:	28 2b       	or	r18, r24
    12c6:	c9 01       	movw	r24, r18
		
		if (check) //if danger is detected back up 5 cm
    12c8:	89 2b       	or	r24, r25
    12ca:	a9 f0       	breq	.+42     	; 0x12f6 <move+0xfc>
		{
			oi_set_wheels(0, 0);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	ca d0       	rcall	.+404    	; 0x146a <oi_set_wheels>
			dangerflag = 1;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	90 93 32 02 	sts	0x0232, r25
    12de:	80 93 31 02 	sts	0x0231, r24
			USART_Transmit_NoSignedIssues_Buffer( status_string, 12 );
    12e2:	6c e0       	ldi	r22, 0x0C	; 12
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	83 eb       	ldi	r24, 0xB3	; 179
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	61 de       	rcall	.-830    	; 0xfae <USART_Transmit_NoSignedIssues_Buffer>
			uprint(TX_string);
			sprintf(TX_string, "FrontRight:%3d\n\r", sensor_data->cliff_frontright_signal);
			uprint(TX_string);
			*/
			
			move_backward(sensor_data, 50);
    12ec:	62 e3       	ldi	r22, 0x32	; 50
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	c8 01       	movw	r24, r16
    12f2:	08 d9       	rcall	.-3568   	; 0x504 <move_backward>
			break;
    12f4:	16 c0       	rjmp	.+44     	; 0x1322 <move+0x128>
		}
		lprintf("%s %d mm", LCDDisp, sum);
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	80 91 07 01 	lds	r24, 0x0107
    12fe:	8f 93       	push	r24
    1300:	80 91 06 01 	lds	r24, 0x0106
    1304:	8f 93       	push	r24
    1306:	7f 92       	push	r7
    1308:	6f 92       	push	r6
    130a:	0e 94 ed 00 	call	0x1da	; 0x1da <lprintf>
	speed = -speed;
	
	oi_set_wheels(speed, speed); // move forward at user defined speed
	int sum = 0;
	mm = abs(mm);
	while (sum < mm) //while travel is not complete, check for distance
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cc 15       	cp	r28, r12
    131c:	dd 05       	cpc	r29, r13
    131e:	0c f4       	brge	.+2      	; 0x1322 <move+0x128>
    1320:	bb cf       	rjmp	.-138    	; 0x1298 <move+0x9e>
			move_backward(sensor_data, 50);
			break;
		}
		lprintf("%s %d mm", LCDDisp, sum);
	}
	oi_set_wheels(0, 0); // stop
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9f d0       	rcall	.+318    	; 0x146a <oi_set_wheels>
	/*oi_free(sensor_data);//free up memory space */	//may want to keep sensor data?
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	8f 90       	pop	r8
    1344:	7f 90       	pop	r7
    1346:	6f 90       	pop	r6
    1348:	08 95       	ret

0000134a <move_forward>:



//------------------------------------------------------------------------------------------------------------------Movement--------------------------
void move_forward(oi_t*sensor_data, int travel)	// this will move the robot forward the indicated distance
{	move(sensor_data, travel, 150);// move forward; half speed
    134a:	46 e9       	ldi	r20, 0x96	; 150
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	55 cf       	rjmp	.-342    	; 0x11fa <move>

00001350 <handle_cmd>:
	USART_Transmit(0);
	return location;
}

void handle_cmd(oi_t*sensor_data)
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
	
	
	unsigned char cmd = USART_Receive();
    1356:	0e de       	rcall	.-996    	; 0xf74 <USART_Receive>
		USART_Transmit(cmd);
		USART_Transmit(10);
		USART_Transmit(13);
	}
	
	if( cmd == 'Z' )
    1358:	8a 35       	cpi	r24, 0x5A	; 90
    135a:	69 f4       	brne	.+26     	; 0x1376 <handle_cmd+0x26>
	{
		standby = 1 - standby;
    135c:	20 91 33 02 	lds	r18, 0x0233
    1360:	30 91 34 02 	lds	r19, 0x0234
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	82 1b       	sub	r24, r18
    136a:	93 0b       	sbc	r25, r19
    136c:	90 93 34 02 	sts	0x0234, r25
    1370:	80 93 33 02 	sts	0x0233, r24
    1374:	33 c0       	rjmp	.+102    	; 0x13dc <handle_cmd+0x8c>
	}
	else
	{
		if( !standby )
    1376:	20 91 33 02 	lds	r18, 0x0233
    137a:	30 91 34 02 	lds	r19, 0x0234
    137e:	23 2b       	or	r18, r19
    1380:	69 f5       	brne	.+90     	; 0x13dc <handle_cmd+0x8c>
		{
			switch (cmd)
    1382:	8d 34       	cpi	r24, 0x4D	; 77
    1384:	51 f1       	breq	.+84     	; 0x13da <handle_cmd+0x8a>
    1386:	38 f4       	brcc	.+14     	; 0x1396 <handle_cmd+0x46>
    1388:	86 34       	cpi	r24, 0x46	; 70
    138a:	89 f0       	breq	.+34     	; 0x13ae <handle_cmd+0x5e>
    138c:	8c 34       	cpi	r24, 0x4C	; 76
    138e:	f1 f0       	breq	.+60     	; 0x13cc <handle_cmd+0x7c>
    1390:	82 34       	cpi	r24, 0x42	; 66
    1392:	21 f5       	brne	.+72     	; 0x13dc <handle_cmd+0x8c>
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <handle_cmd+0x68>
    1396:	82 35       	cpi	r24, 0x52	; 82
    1398:	a1 f0       	breq	.+40     	; 0x13c2 <handle_cmd+0x72>
    139a:	83 35       	cpi	r24, 0x53	; 83
    139c:	e1 f0       	breq	.+56     	; 0x13d6 <handle_cmd+0x86>
    139e:	81 35       	cpi	r24, 0x51	; 81
    13a0:	e9 f4       	brne	.+58     	; 0x13dc <handle_cmd+0x8c>
			{
				//RESEND STATUS STRING
				case 'Q':
				USART_Transmit_NoSignedIssues_Buffer( status_string, 12 );
    13a2:	6c e0       	ldi	r22, 0x0C	; 12
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	83 eb       	ldi	r24, 0xB3	; 179
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	01 de       	rcall	.-1022   	; 0xfae <USART_Transmit_NoSignedIssues_Buffer>
				break;
    13ac:	17 c0       	rjmp	.+46     	; 0x13dc <handle_cmd+0x8c>
				
				//FORWARD
				case 'F':
				move_forward(sensor_data,100);
    13ae:	64 e6       	ldi	r22, 0x64	; 100
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	ce 01       	movw	r24, r28
    13b4:	ca df       	rcall	.-108    	; 0x134a <move_forward>
				break;
    13b6:	12 c0       	rjmp	.+36     	; 0x13dc <handle_cmd+0x8c>
				
				//BACKWARDS
				case 'B':
				move_backward(sensor_data,100);
    13b8:	64 e6       	ldi	r22, 0x64	; 100
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	ce 01       	movw	r24, r28
    13be:	a2 d8       	rcall	.-3772   	; 0x504 <move_backward>
				break;
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <handle_cmd+0x8c>
				
				//RIGHT
				case 'R':
				turn_clockwise(sensor_data,5);
    13c2:	65 e0       	ldi	r22, 0x05	; 5
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	ce 01       	movw	r24, r28
    13c8:	a5 dc       	rcall	.-1718   	; 0xd14 <turn_clockwise>
				break;
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <handle_cmd+0x8c>
				
				//LEFT
				case 'L':
				turn_counterclockwise(sensor_data,5);
    13cc:	65 e0       	ldi	r22, 0x05	; 5
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	ce 01       	movw	r24, r28
    13d2:	58 dc       	rcall	.-1872   	; 0xc84 <turn_counterclockwise>
				break;
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <handle_cmd+0x8c>
				
				//SCAN
				case 'S':
				env_scan();
    13d6:	92 de       	rcall	.-732    	; 0x10fc <env_scan>
				
				//analyze_env();
				//object_process();
				break;
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <handle_cmd+0x8c>
				
				case 'M':
				finish_song_light();
    13da:	e7 dc       	rcall	.-1586   	; 0xdaa <finish_song_light>
				break;
			}
		}
	}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
    13e2:	64 e3       	ldi	r22, 0x34	; 52
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	93 c3       	rjmp	.+1830   	; 0x1b12 <calloc>

000013ec <oi_byte_tx>:
    13ec:	eb e9       	ldi	r30, 0x9B	; 155
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	90 81       	ld	r25, Z
    13f2:	95 ff       	sbrs	r25, 5
    13f4:	fd cf       	rjmp	.-6      	; 0x13f0 <oi_byte_tx+0x4>
    13f6:	80 93 9c 00 	sts	0x009C, r24
    13fa:	08 95       	ret

000013fc <oi_play_song>:
	}
}


/// Plays a given song; use oi_load_song(...) first
void oi_play_song(int index){
    13fc:	cf 93       	push	r28
    13fe:	c8 2f       	mov	r28, r24
	oi_byte_tx(OI_OPCODE_PLAY);
    1400:	8d e8       	ldi	r24, 0x8D	; 141
    1402:	f4 df       	rcall	.-24     	; 0x13ec <oi_byte_tx>
	oi_byte_tx(index);
    1404:	8c 2f       	mov	r24, r28
    1406:	f2 df       	rcall	.-28     	; 0x13ec <oi_byte_tx>
}
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <oi_load_song>:
	oi_byte_tx(left_wheel& 0xff);
}


/// Loads a song onto the iRobot Create
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	c8 2f       	mov	r28, r24
    141e:	7b 01       	movw	r14, r22
    1420:	04 2f       	mov	r16, r20
    1422:	15 2f       	mov	r17, r21
    1424:	c2 2e       	mov	r12, r18
    1426:	d3 2e       	mov	r13, r19
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
    1428:	8c e8       	ldi	r24, 0x8C	; 140
    142a:	e0 df       	rcall	.-64     	; 0x13ec <oi_byte_tx>
	oi_byte_tx(song_index);
    142c:	8c 2f       	mov	r24, r28
    142e:	de df       	rcall	.-68     	; 0x13ec <oi_byte_tx>
	oi_byte_tx(num_notes);
    1430:	8e 2d       	mov	r24, r14
    1432:	dc df       	rcall	.-72     	; 0x13ec <oi_byte_tx>
	for (i=0;i<num_notes;i++) {
    1434:	1e 14       	cp	r1, r14
    1436:	1f 04       	cpc	r1, r15
    1438:	7c f4       	brge	.+30     	; 0x1458 <oi_load_song+0x4c>
    143a:	c0 2f       	mov	r28, r16
    143c:	d1 2f       	mov	r29, r17
    143e:	0c 2d       	mov	r16, r12
    1440:	1d 2d       	mov	r17, r13
	oi_byte_tx(left_wheel& 0xff);
}


/// Loads a song onto the iRobot Create
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
    1442:	ec 0e       	add	r14, r28
    1444:	fd 1e       	adc	r15, r29
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
	oi_byte_tx(song_index);
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
    1446:	89 91       	ld	r24, Y+
    1448:	d1 df       	rcall	.-94     	; 0x13ec <oi_byte_tx>
		oi_byte_tx(duration[i]);
    144a:	f8 01       	movw	r30, r16
    144c:	81 91       	ld	r24, Z+
    144e:	8f 01       	movw	r16, r30
    1450:	cd df       	rcall	.-102    	; 0x13ec <oi_byte_tx>
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
	oi_byte_tx(song_index);
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
    1452:	ce 15       	cp	r28, r14
    1454:	df 05       	cpc	r29, r15
    1456:	b9 f7       	brne	.-18     	; 0x1446 <oi_load_song+0x3a>
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	08 95       	ret

0000146a <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	18 2f       	mov	r17, r24
    1474:	09 2f       	mov	r16, r25
    1476:	c6 2f       	mov	r28, r22
    1478:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
    147a:	81 e9       	ldi	r24, 0x91	; 145
    147c:	b7 df       	rcall	.-146    	; 0x13ec <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
    147e:	80 2f       	mov	r24, r16
    1480:	b5 df       	rcall	.-150    	; 0x13ec <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
    1482:	81 2f       	mov	r24, r17
    1484:	b3 df       	rcall	.-154    	; 0x13ec <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
    1486:	8d 2f       	mov	r24, r29
    1488:	b1 df       	rcall	.-158    	; 0x13ec <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
    148a:	8c 2f       	mov	r24, r28
    148c:	af df       	rcall	.-162    	; 0x13ec <oi_byte_tx>
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	08 2f       	mov	r16, r24
    14a2:	16 2f       	mov	r17, r22
    14a4:	d4 2f       	mov	r29, r20
    14a6:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
    14a8:	8b e8       	ldi	r24, 0x8B	; 139
    14aa:	a0 df       	rcall	.-192    	; 0x13ec <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
    14ac:	11 23       	and	r17, r17
    14ae:	41 f0       	breq	.+16     	; 0x14c0 <oi_set_leds+0x28>
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	01 11       	cpse	r16, r1
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <oi_set_leds+0x24>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	cb 01       	movw	r24, r22
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <oi_set_leds+0x2c>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	93 df       	rcall	.-218    	; 0x13ec <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
    14c6:	8d 2f       	mov	r24, r29
    14c8:	91 df       	rcall	.-222    	; 0x13ec <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
    14ca:	8c 2f       	mov	r24, r28
    14cc:	8f df       	rcall	.-226    	; 0x13ec <oi_byte_tx>
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
    14d8:	eb e9       	ldi	r30, 0x9B	; 155
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	88 23       	and	r24, r24
    14e0:	ec f7       	brge	.-6      	; 0x14dc <oi_byte_rx+0x4>

	return UDR1;
    14e2:	80 91 9c 00 	lds	r24, 0x009C
}
    14e6:	08 95       	ret

000014e8 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    14f6:	80 91 9b 00 	lds	r24, 0x009B
    14fa:	88 23       	and	r24, r24
    14fc:	44 f4       	brge	.+16     	; 0x150e <oi_update+0x26>
		i = UDR1;
    14fe:	ac e9       	ldi	r26, 0x9C	; 156
    1500:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1502:	eb e9       	ldi	r30, 0x9B	; 155
    1504:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
    1506:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1508:	80 81       	ld	r24, Z
    150a:	88 23       	and	r24, r24
    150c:	e4 f3       	brlt	.-8      	; 0x1506 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    150e:	8e e8       	ldi	r24, 0x8E	; 142
    1510:	6d df       	rcall	.-294    	; 0x13ec <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
    1512:	86 e0       	ldi	r24, 0x06	; 6
    1514:	6b df       	rcall	.-298    	; 0x13ec <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    1516:	87 01       	movw	r16, r14
    1518:	0c 5c       	subi	r16, 0xCC	; 204
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
    151c:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    151e:	dc df       	rcall	.-72     	; 0x14d8 <oi_byte_rx>
    1520:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    1522:	c0 17       	cp	r28, r16
    1524:	d1 07       	cpc	r29, r17
    1526:	d9 f7       	brne	.-10     	; 0x151e <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1528:	f7 01       	movw	r30, r14
    152a:	94 85       	ldd	r25, Z+12	; 0x0c
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	25 85       	ldd	r18, Z+13	; 0x0d
    1530:	82 0f       	add	r24, r18
    1532:	91 1d       	adc	r25, r1
    1534:	95 87       	std	Z+13, r25	; 0x0d
    1536:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1538:	96 85       	ldd	r25, Z+14	; 0x0e
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	27 85       	ldd	r18, Z+15	; 0x0f
    153e:	82 0f       	add	r24, r18
    1540:	91 1d       	adc	r25, r1
    1542:	97 87       	std	Z+15, r25	; 0x0f
    1544:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    1546:	91 89       	ldd	r25, Z+17	; 0x11
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	22 89       	ldd	r18, Z+18	; 0x12
    154c:	82 0f       	add	r24, r18
    154e:	91 1d       	adc	r25, r1
    1550:	92 8b       	std	Z+18, r25	; 0x12
    1552:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    1554:	93 89       	ldd	r25, Z+19	; 0x13
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	24 89       	ldd	r18, Z+20	; 0x14
    155a:	82 0f       	add	r24, r18
    155c:	91 1d       	adc	r25, r1
    155e:	94 8b       	std	Z+20, r25	; 0x14
    1560:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    1562:	96 89       	ldd	r25, Z+22	; 0x16
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	27 89       	ldd	r18, Z+23	; 0x17
    1568:	82 0f       	add	r24, r18
    156a:	91 1d       	adc	r25, r1
    156c:	97 8b       	std	Z+23, r25	; 0x17
    156e:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    1570:	90 8d       	ldd	r25, Z+24	; 0x18
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	21 8d       	ldd	r18, Z+25	; 0x19
    1576:	82 0f       	add	r24, r18
    1578:	91 1d       	adc	r25, r1
    157a:	91 8f       	std	Z+25, r25	; 0x19
    157c:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    157e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	23 8d       	ldd	r18, Z+27	; 0x1b
    1584:	82 0f       	add	r24, r18
    1586:	91 1d       	adc	r25, r1
    1588:	93 8f       	std	Z+27, r25	; 0x1b
    158a:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    158c:	94 8d       	ldd	r25, Z+28	; 0x1c
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	25 8d       	ldd	r18, Z+29	; 0x1d
    1592:	82 0f       	add	r24, r18
    1594:	91 1d       	adc	r25, r1
    1596:	95 8f       	std	Z+29, r25	; 0x1d
    1598:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
    159a:	96 8d       	ldd	r25, Z+30	; 0x1e
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	27 8d       	ldd	r18, Z+31	; 0x1f
    15a0:	82 0f       	add	r24, r18
    15a2:	91 1d       	adc	r25, r1
    15a4:	97 8f       	std	Z+31, r25	; 0x1f
    15a6:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    15a8:	90 a1       	ldd	r25, Z+32	; 0x20
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	21 a1       	ldd	r18, Z+33	; 0x21
    15ae:	82 0f       	add	r24, r18
    15b0:	91 1d       	adc	r25, r1
    15b2:	91 a3       	std	Z+33, r25	; 0x21
    15b4:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    15b6:	92 a1       	ldd	r25, Z+34	; 0x22
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	23 a1       	ldd	r18, Z+35	; 0x23
    15bc:	82 0f       	add	r24, r18
    15be:	91 1d       	adc	r25, r1
    15c0:	93 a3       	std	Z+35, r25	; 0x23
    15c2:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    15c4:	42 a5       	ldd	r20, Z+42	; 0x2a
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	31 a5       	ldd	r19, Z+41	; 0x29
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	24 0f       	add	r18, r20
    15ce:	35 1f       	adc	r19, r21
    15d0:	36 a3       	std	Z+38, r19	; 0x26
    15d2:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    15d4:	90 a9       	ldd	r25, Z+48	; 0x30
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	84 0f       	add	r24, r20
    15da:	95 1f       	adc	r25, r21
    15dc:	95 a7       	std	Z+45, r25	; 0x2d
    15de:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    15e0:	92 a9       	ldd	r25, Z+50	; 0x32
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	23 a9       	ldd	r18, Z+51	; 0x33
    15e6:	82 0f       	add	r24, r18
    15e8:	91 1d       	adc	r25, r1
    15ea:	97 a7       	std	Z+47, r25	; 0x2f
    15ec:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    15ee:	94 a9       	ldd	r25, Z+52	; 0x34
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	25 a9       	ldd	r18, Z+53	; 0x35
    15f4:	82 0f       	add	r24, r18
    15f6:	91 1d       	adc	r25, r1
    15f8:	91 ab       	std	Z+49, r25	; 0x31
    15fa:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    15fc:	96 a9       	ldd	r25, Z+54	; 0x36
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	27 a9       	ldd	r18, Z+55	; 0x37
    1602:	82 0f       	add	r24, r18
    1604:	91 1d       	adc	r25, r1
    1606:	93 ab       	std	Z+51, r25	; 0x33
    1608:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    160a:	83 e2       	ldi	r24, 0x23	; 35
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a6 d8       	rcall	.-3764   	; 0x75c <wait_ms>
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	08 95       	ret

0000161e <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1628:	09 e9       	ldi	r16, 0x99	; 153
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	80 e1       	ldi	r24, 0x10	; 16
    162e:	f8 01       	movw	r30, r16
    1630:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    1632:	88 e1       	ldi	r24, 0x18	; 24
    1634:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	d5 de       	rcall	.-598    	; 0x13ec <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    1642:	81 e8       	ldi	r24, 0x81	; 129
    1644:	d3 de       	rcall	.-602    	; 0x13ec <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	d1 de       	rcall	.-606    	; 0x13ec <oi_byte_tx>
	wait_ms(100);
    164a:	84 e6       	ldi	r24, 0x64	; 100
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	86 d8       	rcall	.-3828   	; 0x75c <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    1650:	81 e2       	ldi	r24, 0x21	; 33
    1652:	f8 01       	movw	r30, r16
    1654:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    1656:	84 e8       	ldi	r24, 0x84	; 132
    1658:	c9 de       	rcall	.-622    	; 0x13ec <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    165a:	2f ef       	ldi	r18, 0xFF	; 255
    165c:	47 e0       	ldi	r20, 0x07	; 7
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	1a df       	rcall	.-460    	; 0x1498 <oi_set_leds>
	
	oi_update(self);
    1664:	ce 01       	movw	r24, r28
    1666:	40 df       	rcall	.-384    	; 0x14e8 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    1668:	ce 01       	movw	r24, r28
    166a:	3e df       	rcall	.-388    	; 0x14e8 <oi_update>
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <__subsf3>:
    1676:	50 58       	subi	r21, 0x80	; 128

00001678 <__addsf3>:
    1678:	bb 27       	eor	r27, r27
    167a:	aa 27       	eor	r26, r26
    167c:	0e d0       	rcall	.+28     	; 0x169a <__addsf3x>
    167e:	75 c1       	rjmp	.+746    	; 0x196a <__fp_round>
    1680:	66 d1       	rcall	.+716    	; 0x194e <__fp_pscA>
    1682:	30 f0       	brcs	.+12     	; 0x1690 <__addsf3+0x18>
    1684:	6b d1       	rcall	.+726    	; 0x195c <__fp_pscB>
    1686:	20 f0       	brcs	.+8      	; 0x1690 <__addsf3+0x18>
    1688:	31 f4       	brne	.+12     	; 0x1696 <__addsf3+0x1e>
    168a:	9f 3f       	cpi	r25, 0xFF	; 255
    168c:	11 f4       	brne	.+4      	; 0x1692 <__addsf3+0x1a>
    168e:	1e f4       	brtc	.+6      	; 0x1696 <__addsf3+0x1e>
    1690:	5b c1       	rjmp	.+694    	; 0x1948 <__fp_nan>
    1692:	0e f4       	brtc	.+2      	; 0x1696 <__addsf3+0x1e>
    1694:	e0 95       	com	r30
    1696:	e7 fb       	bst	r30, 7
    1698:	51 c1       	rjmp	.+674    	; 0x193c <__fp_inf>

0000169a <__addsf3x>:
    169a:	e9 2f       	mov	r30, r25
    169c:	77 d1       	rcall	.+750    	; 0x198c <__fp_split3>
    169e:	80 f3       	brcs	.-32     	; 0x1680 <__addsf3+0x8>
    16a0:	ba 17       	cp	r27, r26
    16a2:	62 07       	cpc	r22, r18
    16a4:	73 07       	cpc	r23, r19
    16a6:	84 07       	cpc	r24, r20
    16a8:	95 07       	cpc	r25, r21
    16aa:	18 f0       	brcs	.+6      	; 0x16b2 <__addsf3x+0x18>
    16ac:	71 f4       	brne	.+28     	; 0x16ca <__addsf3x+0x30>
    16ae:	9e f5       	brtc	.+102    	; 0x1716 <__addsf3x+0x7c>
    16b0:	8f c1       	rjmp	.+798    	; 0x19d0 <__fp_zero>
    16b2:	0e f4       	brtc	.+2      	; 0x16b6 <__addsf3x+0x1c>
    16b4:	e0 95       	com	r30
    16b6:	0b 2e       	mov	r0, r27
    16b8:	ba 2f       	mov	r27, r26
    16ba:	a0 2d       	mov	r26, r0
    16bc:	0b 01       	movw	r0, r22
    16be:	b9 01       	movw	r22, r18
    16c0:	90 01       	movw	r18, r0
    16c2:	0c 01       	movw	r0, r24
    16c4:	ca 01       	movw	r24, r20
    16c6:	a0 01       	movw	r20, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	ff 27       	eor	r31, r31
    16cc:	59 1b       	sub	r21, r25
    16ce:	99 f0       	breq	.+38     	; 0x16f6 <__addsf3x+0x5c>
    16d0:	59 3f       	cpi	r21, 0xF9	; 249
    16d2:	50 f4       	brcc	.+20     	; 0x16e8 <__addsf3x+0x4e>
    16d4:	50 3e       	cpi	r21, 0xE0	; 224
    16d6:	68 f1       	brcs	.+90     	; 0x1732 <__addsf3x+0x98>
    16d8:	1a 16       	cp	r1, r26
    16da:	f0 40       	sbci	r31, 0x00	; 0
    16dc:	a2 2f       	mov	r26, r18
    16de:	23 2f       	mov	r18, r19
    16e0:	34 2f       	mov	r19, r20
    16e2:	44 27       	eor	r20, r20
    16e4:	58 5f       	subi	r21, 0xF8	; 248
    16e6:	f3 cf       	rjmp	.-26     	; 0x16ce <__addsf3x+0x34>
    16e8:	46 95       	lsr	r20
    16ea:	37 95       	ror	r19
    16ec:	27 95       	ror	r18
    16ee:	a7 95       	ror	r26
    16f0:	f0 40       	sbci	r31, 0x00	; 0
    16f2:	53 95       	inc	r21
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__addsf3x+0x4e>
    16f6:	7e f4       	brtc	.+30     	; 0x1716 <__addsf3x+0x7c>
    16f8:	1f 16       	cp	r1, r31
    16fa:	ba 0b       	sbc	r27, r26
    16fc:	62 0b       	sbc	r22, r18
    16fe:	73 0b       	sbc	r23, r19
    1700:	84 0b       	sbc	r24, r20
    1702:	ba f0       	brmi	.+46     	; 0x1732 <__addsf3x+0x98>
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	a1 f0       	breq	.+40     	; 0x1730 <__addsf3x+0x96>
    1708:	ff 0f       	add	r31, r31
    170a:	bb 1f       	adc	r27, r27
    170c:	66 1f       	adc	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	c2 f7       	brpl	.-16     	; 0x1704 <__addsf3x+0x6a>
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <__addsf3x+0x98>
    1716:	ba 0f       	add	r27, r26
    1718:	62 1f       	adc	r22, r18
    171a:	73 1f       	adc	r23, r19
    171c:	84 1f       	adc	r24, r20
    171e:	48 f4       	brcc	.+18     	; 0x1732 <__addsf3x+0x98>
    1720:	87 95       	ror	r24
    1722:	77 95       	ror	r23
    1724:	67 95       	ror	r22
    1726:	b7 95       	ror	r27
    1728:	f7 95       	ror	r31
    172a:	9e 3f       	cpi	r25, 0xFE	; 254
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__addsf3x+0x96>
    172e:	b3 cf       	rjmp	.-154    	; 0x1696 <__addsf3+0x1e>
    1730:	93 95       	inc	r25
    1732:	88 0f       	add	r24, r24
    1734:	08 f0       	brcs	.+2      	; 0x1738 <__addsf3x+0x9e>
    1736:	99 27       	eor	r25, r25
    1738:	ee 0f       	add	r30, r30
    173a:	97 95       	ror	r25
    173c:	87 95       	ror	r24
    173e:	08 95       	ret

00001740 <__cmpsf2>:
    1740:	d9 d0       	rcall	.+434    	; 0x18f4 <__fp_cmp>
    1742:	08 f4       	brcc	.+2      	; 0x1746 <__cmpsf2+0x6>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	08 95       	ret

00001748 <__divsf3>:
    1748:	0c d0       	rcall	.+24     	; 0x1762 <__divsf3x>
    174a:	0f c1       	rjmp	.+542    	; 0x196a <__fp_round>
    174c:	07 d1       	rcall	.+526    	; 0x195c <__fp_pscB>
    174e:	40 f0       	brcs	.+16     	; 0x1760 <__divsf3+0x18>
    1750:	fe d0       	rcall	.+508    	; 0x194e <__fp_pscA>
    1752:	30 f0       	brcs	.+12     	; 0x1760 <__divsf3+0x18>
    1754:	21 f4       	brne	.+8      	; 0x175e <__divsf3+0x16>
    1756:	5f 3f       	cpi	r21, 0xFF	; 255
    1758:	19 f0       	breq	.+6      	; 0x1760 <__divsf3+0x18>
    175a:	f0 c0       	rjmp	.+480    	; 0x193c <__fp_inf>
    175c:	51 11       	cpse	r21, r1
    175e:	39 c1       	rjmp	.+626    	; 0x19d2 <__fp_szero>
    1760:	f3 c0       	rjmp	.+486    	; 0x1948 <__fp_nan>

00001762 <__divsf3x>:
    1762:	14 d1       	rcall	.+552    	; 0x198c <__fp_split3>
    1764:	98 f3       	brcs	.-26     	; 0x174c <__divsf3+0x4>

00001766 <__divsf3_pse>:
    1766:	99 23       	and	r25, r25
    1768:	c9 f3       	breq	.-14     	; 0x175c <__divsf3+0x14>
    176a:	55 23       	and	r21, r21
    176c:	b1 f3       	breq	.-20     	; 0x175a <__divsf3+0x12>
    176e:	95 1b       	sub	r25, r21
    1770:	55 0b       	sbc	r21, r21
    1772:	bb 27       	eor	r27, r27
    1774:	aa 27       	eor	r26, r26
    1776:	62 17       	cp	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	84 07       	cpc	r24, r20
    177c:	38 f0       	brcs	.+14     	; 0x178c <__divsf3_pse+0x26>
    177e:	9f 5f       	subi	r25, 0xFF	; 255
    1780:	5f 4f       	sbci	r21, 0xFF	; 255
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	44 1f       	adc	r20, r20
    1788:	aa 1f       	adc	r26, r26
    178a:	a9 f3       	breq	.-22     	; 0x1776 <__divsf3_pse+0x10>
    178c:	33 d0       	rcall	.+102    	; 0x17f4 <__divsf3_pse+0x8e>
    178e:	0e 2e       	mov	r0, r30
    1790:	3a f0       	brmi	.+14     	; 0x17a0 <__divsf3_pse+0x3a>
    1792:	e0 e8       	ldi	r30, 0x80	; 128
    1794:	30 d0       	rcall	.+96     	; 0x17f6 <__divsf3_pse+0x90>
    1796:	91 50       	subi	r25, 0x01	; 1
    1798:	50 40       	sbci	r21, 0x00	; 0
    179a:	e6 95       	lsr	r30
    179c:	00 1c       	adc	r0, r0
    179e:	ca f7       	brpl	.-14     	; 0x1792 <__divsf3_pse+0x2c>
    17a0:	29 d0       	rcall	.+82     	; 0x17f4 <__divsf3_pse+0x8e>
    17a2:	fe 2f       	mov	r31, r30
    17a4:	27 d0       	rcall	.+78     	; 0x17f4 <__divsf3_pse+0x8e>
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	bb 1f       	adc	r27, r27
    17ae:	26 17       	cp	r18, r22
    17b0:	37 07       	cpc	r19, r23
    17b2:	48 07       	cpc	r20, r24
    17b4:	ab 07       	cpc	r26, r27
    17b6:	b0 e8       	ldi	r27, 0x80	; 128
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__divsf3_pse+0x56>
    17ba:	bb 0b       	sbc	r27, r27
    17bc:	80 2d       	mov	r24, r0
    17be:	bf 01       	movw	r22, r30
    17c0:	ff 27       	eor	r31, r31
    17c2:	93 58       	subi	r25, 0x83	; 131
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	2a f0       	brmi	.+10     	; 0x17d2 <__divsf3_pse+0x6c>
    17c8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ca:	51 05       	cpc	r21, r1
    17cc:	68 f0       	brcs	.+26     	; 0x17e8 <__divsf3_pse+0x82>
    17ce:	b6 c0       	rjmp	.+364    	; 0x193c <__fp_inf>
    17d0:	00 c1       	rjmp	.+512    	; 0x19d2 <__fp_szero>
    17d2:	5f 3f       	cpi	r21, 0xFF	; 255
    17d4:	ec f3       	brlt	.-6      	; 0x17d0 <__divsf3_pse+0x6a>
    17d6:	98 3e       	cpi	r25, 0xE8	; 232
    17d8:	dc f3       	brlt	.-10     	; 0x17d0 <__divsf3_pse+0x6a>
    17da:	86 95       	lsr	r24
    17dc:	77 95       	ror	r23
    17de:	67 95       	ror	r22
    17e0:	b7 95       	ror	r27
    17e2:	f7 95       	ror	r31
    17e4:	9f 5f       	subi	r25, 0xFF	; 255
    17e6:	c9 f7       	brne	.-14     	; 0x17da <__divsf3_pse+0x74>
    17e8:	88 0f       	add	r24, r24
    17ea:	91 1d       	adc	r25, r1
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	97 f9       	bld	r25, 7
    17f2:	08 95       	ret
    17f4:	e1 e0       	ldi	r30, 0x01	; 1
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	bb 1f       	adc	r27, r27
    17fe:	62 17       	cp	r22, r18
    1800:	73 07       	cpc	r23, r19
    1802:	84 07       	cpc	r24, r20
    1804:	ba 07       	cpc	r27, r26
    1806:	20 f0       	brcs	.+8      	; 0x1810 <__divsf3_pse+0xaa>
    1808:	62 1b       	sub	r22, r18
    180a:	73 0b       	sbc	r23, r19
    180c:	84 0b       	sbc	r24, r20
    180e:	ba 0b       	sbc	r27, r26
    1810:	ee 1f       	adc	r30, r30
    1812:	88 f7       	brcc	.-30     	; 0x17f6 <__divsf3_pse+0x90>
    1814:	e0 95       	com	r30
    1816:	08 95       	ret

00001818 <__fixsfsi>:
    1818:	04 d0       	rcall	.+8      	; 0x1822 <__fixunssfsi>
    181a:	68 94       	set
    181c:	b1 11       	cpse	r27, r1
    181e:	d9 c0       	rjmp	.+434    	; 0x19d2 <__fp_szero>
    1820:	08 95       	ret

00001822 <__fixunssfsi>:
    1822:	bc d0       	rcall	.+376    	; 0x199c <__fp_splitA>
    1824:	88 f0       	brcs	.+34     	; 0x1848 <__fixunssfsi+0x26>
    1826:	9f 57       	subi	r25, 0x7F	; 127
    1828:	90 f0       	brcs	.+36     	; 0x184e <__fixunssfsi+0x2c>
    182a:	b9 2f       	mov	r27, r25
    182c:	99 27       	eor	r25, r25
    182e:	b7 51       	subi	r27, 0x17	; 23
    1830:	a0 f0       	brcs	.+40     	; 0x185a <__fixunssfsi+0x38>
    1832:	d1 f0       	breq	.+52     	; 0x1868 <__fixunssfsi+0x46>
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	1a f0       	brmi	.+6      	; 0x1844 <__fixunssfsi+0x22>
    183e:	ba 95       	dec	r27
    1840:	c9 f7       	brne	.-14     	; 0x1834 <__fixunssfsi+0x12>
    1842:	12 c0       	rjmp	.+36     	; 0x1868 <__fixunssfsi+0x46>
    1844:	b1 30       	cpi	r27, 0x01	; 1
    1846:	81 f0       	breq	.+32     	; 0x1868 <__fixunssfsi+0x46>
    1848:	c3 d0       	rcall	.+390    	; 0x19d0 <__fp_zero>
    184a:	b1 e0       	ldi	r27, 0x01	; 1
    184c:	08 95       	ret
    184e:	c0 c0       	rjmp	.+384    	; 0x19d0 <__fp_zero>
    1850:	67 2f       	mov	r22, r23
    1852:	78 2f       	mov	r23, r24
    1854:	88 27       	eor	r24, r24
    1856:	b8 5f       	subi	r27, 0xF8	; 248
    1858:	39 f0       	breq	.+14     	; 0x1868 <__fixunssfsi+0x46>
    185a:	b9 3f       	cpi	r27, 0xF9	; 249
    185c:	cc f3       	brlt	.-14     	; 0x1850 <__fixunssfsi+0x2e>
    185e:	86 95       	lsr	r24
    1860:	77 95       	ror	r23
    1862:	67 95       	ror	r22
    1864:	b3 95       	inc	r27
    1866:	d9 f7       	brne	.-10     	; 0x185e <__fixunssfsi+0x3c>
    1868:	3e f4       	brtc	.+14     	; 0x1878 <__fixunssfsi+0x56>
    186a:	90 95       	com	r25
    186c:	80 95       	com	r24
    186e:	70 95       	com	r23
    1870:	61 95       	neg	r22
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	08 95       	ret

0000187a <__floatunsisf>:
    187a:	e8 94       	clt
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <__floatsisf+0x12>

0000187e <__floatsisf>:
    187e:	97 fb       	bst	r25, 7
    1880:	3e f4       	brtc	.+14     	; 0x1890 <__floatsisf+0x12>
    1882:	90 95       	com	r25
    1884:	80 95       	com	r24
    1886:	70 95       	com	r23
    1888:	61 95       	neg	r22
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	99 23       	and	r25, r25
    1892:	a9 f0       	breq	.+42     	; 0x18be <__floatsisf+0x40>
    1894:	f9 2f       	mov	r31, r25
    1896:	96 e9       	ldi	r25, 0x96	; 150
    1898:	bb 27       	eor	r27, r27
    189a:	93 95       	inc	r25
    189c:	f6 95       	lsr	r31
    189e:	87 95       	ror	r24
    18a0:	77 95       	ror	r23
    18a2:	67 95       	ror	r22
    18a4:	b7 95       	ror	r27
    18a6:	f1 11       	cpse	r31, r1
    18a8:	f8 cf       	rjmp	.-16     	; 0x189a <__floatsisf+0x1c>
    18aa:	fa f4       	brpl	.+62     	; 0x18ea <__floatsisf+0x6c>
    18ac:	bb 0f       	add	r27, r27
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__floatsisf+0x36>
    18b0:	60 ff       	sbrs	r22, 0
    18b2:	1b c0       	rjmp	.+54     	; 0x18ea <__floatsisf+0x6c>
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	16 c0       	rjmp	.+44     	; 0x18ea <__floatsisf+0x6c>
    18be:	88 23       	and	r24, r24
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <__floatsisf+0x48>
    18c2:	96 e9       	ldi	r25, 0x96	; 150
    18c4:	11 c0       	rjmp	.+34     	; 0x18e8 <__floatsisf+0x6a>
    18c6:	77 23       	and	r23, r23
    18c8:	21 f0       	breq	.+8      	; 0x18d2 <__floatsisf+0x54>
    18ca:	9e e8       	ldi	r25, 0x8E	; 142
    18cc:	87 2f       	mov	r24, r23
    18ce:	76 2f       	mov	r23, r22
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <__floatsisf+0x5e>
    18d2:	66 23       	and	r22, r22
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <__floatsisf+0x74>
    18d6:	96 e8       	ldi	r25, 0x86	; 134
    18d8:	86 2f       	mov	r24, r22
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	2a f0       	brmi	.+10     	; 0x18ea <__floatsisf+0x6c>
    18e0:	9a 95       	dec	r25
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	da f7       	brpl	.-10     	; 0x18e0 <__floatsisf+0x62>
    18ea:	88 0f       	add	r24, r24
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	97 f9       	bld	r25, 7
    18f2:	08 95       	ret

000018f4 <__fp_cmp>:
    18f4:	99 0f       	add	r25, r25
    18f6:	00 08       	sbc	r0, r0
    18f8:	55 0f       	add	r21, r21
    18fa:	aa 0b       	sbc	r26, r26
    18fc:	e0 e8       	ldi	r30, 0x80	; 128
    18fe:	fe ef       	ldi	r31, 0xFE	; 254
    1900:	16 16       	cp	r1, r22
    1902:	17 06       	cpc	r1, r23
    1904:	e8 07       	cpc	r30, r24
    1906:	f9 07       	cpc	r31, r25
    1908:	c0 f0       	brcs	.+48     	; 0x193a <__fp_cmp+0x46>
    190a:	12 16       	cp	r1, r18
    190c:	13 06       	cpc	r1, r19
    190e:	e4 07       	cpc	r30, r20
    1910:	f5 07       	cpc	r31, r21
    1912:	98 f0       	brcs	.+38     	; 0x193a <__fp_cmp+0x46>
    1914:	62 1b       	sub	r22, r18
    1916:	73 0b       	sbc	r23, r19
    1918:	84 0b       	sbc	r24, r20
    191a:	95 0b       	sbc	r25, r21
    191c:	39 f4       	brne	.+14     	; 0x192c <__fp_cmp+0x38>
    191e:	0a 26       	eor	r0, r26
    1920:	61 f0       	breq	.+24     	; 0x193a <__fp_cmp+0x46>
    1922:	23 2b       	or	r18, r19
    1924:	24 2b       	or	r18, r20
    1926:	25 2b       	or	r18, r21
    1928:	21 f4       	brne	.+8      	; 0x1932 <__fp_cmp+0x3e>
    192a:	08 95       	ret
    192c:	0a 26       	eor	r0, r26
    192e:	09 f4       	brne	.+2      	; 0x1932 <__fp_cmp+0x3e>
    1930:	a1 40       	sbci	r26, 0x01	; 1
    1932:	a6 95       	lsr	r26
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	81 1d       	adc	r24, r1
    1938:	81 1d       	adc	r24, r1
    193a:	08 95       	ret

0000193c <__fp_inf>:
    193c:	97 f9       	bld	r25, 7
    193e:	9f 67       	ori	r25, 0x7F	; 127
    1940:	80 e8       	ldi	r24, 0x80	; 128
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	08 95       	ret

00001948 <__fp_nan>:
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	80 ec       	ldi	r24, 0xC0	; 192
    194c:	08 95       	ret

0000194e <__fp_pscA>:
    194e:	00 24       	eor	r0, r0
    1950:	0a 94       	dec	r0
    1952:	16 16       	cp	r1, r22
    1954:	17 06       	cpc	r1, r23
    1956:	18 06       	cpc	r1, r24
    1958:	09 06       	cpc	r0, r25
    195a:	08 95       	ret

0000195c <__fp_pscB>:
    195c:	00 24       	eor	r0, r0
    195e:	0a 94       	dec	r0
    1960:	12 16       	cp	r1, r18
    1962:	13 06       	cpc	r1, r19
    1964:	14 06       	cpc	r1, r20
    1966:	05 06       	cpc	r0, r21
    1968:	08 95       	ret

0000196a <__fp_round>:
    196a:	09 2e       	mov	r0, r25
    196c:	03 94       	inc	r0
    196e:	00 0c       	add	r0, r0
    1970:	11 f4       	brne	.+4      	; 0x1976 <__fp_round+0xc>
    1972:	88 23       	and	r24, r24
    1974:	52 f0       	brmi	.+20     	; 0x198a <__fp_round+0x20>
    1976:	bb 0f       	add	r27, r27
    1978:	40 f4       	brcc	.+16     	; 0x198a <__fp_round+0x20>
    197a:	bf 2b       	or	r27, r31
    197c:	11 f4       	brne	.+4      	; 0x1982 <__fp_round+0x18>
    197e:	60 ff       	sbrs	r22, 0
    1980:	04 c0       	rjmp	.+8      	; 0x198a <__fp_round+0x20>
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	08 95       	ret

0000198c <__fp_split3>:
    198c:	57 fd       	sbrc	r21, 7
    198e:	90 58       	subi	r25, 0x80	; 128
    1990:	44 0f       	add	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	59 f0       	breq	.+22     	; 0x19ac <__fp_splitA+0x10>
    1996:	5f 3f       	cpi	r21, 0xFF	; 255
    1998:	71 f0       	breq	.+28     	; 0x19b6 <__fp_splitA+0x1a>
    199a:	47 95       	ror	r20

0000199c <__fp_splitA>:
    199c:	88 0f       	add	r24, r24
    199e:	97 fb       	bst	r25, 7
    19a0:	99 1f       	adc	r25, r25
    19a2:	61 f0       	breq	.+24     	; 0x19bc <__fp_splitA+0x20>
    19a4:	9f 3f       	cpi	r25, 0xFF	; 255
    19a6:	79 f0       	breq	.+30     	; 0x19c6 <__fp_splitA+0x2a>
    19a8:	87 95       	ror	r24
    19aa:	08 95       	ret
    19ac:	12 16       	cp	r1, r18
    19ae:	13 06       	cpc	r1, r19
    19b0:	14 06       	cpc	r1, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	f2 cf       	rjmp	.-28     	; 0x199a <__fp_split3+0xe>
    19b6:	46 95       	lsr	r20
    19b8:	f1 df       	rcall	.-30     	; 0x199c <__fp_splitA>
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <__fp_splitA+0x30>
    19bc:	16 16       	cp	r1, r22
    19be:	17 06       	cpc	r1, r23
    19c0:	18 06       	cpc	r1, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	f1 cf       	rjmp	.-30     	; 0x19a8 <__fp_splitA+0xc>
    19c6:	86 95       	lsr	r24
    19c8:	71 05       	cpc	r23, r1
    19ca:	61 05       	cpc	r22, r1
    19cc:	08 94       	sec
    19ce:	08 95       	ret

000019d0 <__fp_zero>:
    19d0:	e8 94       	clt

000019d2 <__fp_szero>:
    19d2:	bb 27       	eor	r27, r27
    19d4:	66 27       	eor	r22, r22
    19d6:	77 27       	eor	r23, r23
    19d8:	cb 01       	movw	r24, r22
    19da:	97 f9       	bld	r25, 7
    19dc:	08 95       	ret

000019de <__gesf2>:
    19de:	8a df       	rcall	.-236    	; 0x18f4 <__fp_cmp>
    19e0:	08 f4       	brcc	.+2      	; 0x19e4 <__gesf2+0x6>
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <__mulsf3>:
    19e6:	0b d0       	rcall	.+22     	; 0x19fe <__mulsf3x>
    19e8:	c0 cf       	rjmp	.-128    	; 0x196a <__fp_round>
    19ea:	b1 df       	rcall	.-158    	; 0x194e <__fp_pscA>
    19ec:	28 f0       	brcs	.+10     	; 0x19f8 <__mulsf3+0x12>
    19ee:	b6 df       	rcall	.-148    	; 0x195c <__fp_pscB>
    19f0:	18 f0       	brcs	.+6      	; 0x19f8 <__mulsf3+0x12>
    19f2:	95 23       	and	r25, r21
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <__mulsf3+0x12>
    19f6:	a2 cf       	rjmp	.-188    	; 0x193c <__fp_inf>
    19f8:	a7 cf       	rjmp	.-178    	; 0x1948 <__fp_nan>
    19fa:	11 24       	eor	r1, r1
    19fc:	ea cf       	rjmp	.-44     	; 0x19d2 <__fp_szero>

000019fe <__mulsf3x>:
    19fe:	c6 df       	rcall	.-116    	; 0x198c <__fp_split3>
    1a00:	a0 f3       	brcs	.-24     	; 0x19ea <__mulsf3+0x4>

00001a02 <__mulsf3_pse>:
    1a02:	95 9f       	mul	r25, r21
    1a04:	d1 f3       	breq	.-12     	; 0x19fa <__mulsf3+0x14>
    1a06:	95 0f       	add	r25, r21
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	55 1f       	adc	r21, r21
    1a0c:	62 9f       	mul	r22, r18
    1a0e:	f0 01       	movw	r30, r0
    1a10:	72 9f       	mul	r23, r18
    1a12:	bb 27       	eor	r27, r27
    1a14:	f0 0d       	add	r31, r0
    1a16:	b1 1d       	adc	r27, r1
    1a18:	63 9f       	mul	r22, r19
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	f0 0d       	add	r31, r0
    1a1e:	b1 1d       	adc	r27, r1
    1a20:	aa 1f       	adc	r26, r26
    1a22:	64 9f       	mul	r22, r20
    1a24:	66 27       	eor	r22, r22
    1a26:	b0 0d       	add	r27, r0
    1a28:	a1 1d       	adc	r26, r1
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	82 9f       	mul	r24, r18
    1a2e:	22 27       	eor	r18, r18
    1a30:	b0 0d       	add	r27, r0
    1a32:	a1 1d       	adc	r26, r1
    1a34:	62 1f       	adc	r22, r18
    1a36:	73 9f       	mul	r23, r19
    1a38:	b0 0d       	add	r27, r0
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	62 1f       	adc	r22, r18
    1a3e:	83 9f       	mul	r24, r19
    1a40:	a0 0d       	add	r26, r0
    1a42:	61 1d       	adc	r22, r1
    1a44:	22 1f       	adc	r18, r18
    1a46:	74 9f       	mul	r23, r20
    1a48:	33 27       	eor	r19, r19
    1a4a:	a0 0d       	add	r26, r0
    1a4c:	61 1d       	adc	r22, r1
    1a4e:	23 1f       	adc	r18, r19
    1a50:	84 9f       	mul	r24, r20
    1a52:	60 0d       	add	r22, r0
    1a54:	21 1d       	adc	r18, r1
    1a56:	82 2f       	mov	r24, r18
    1a58:	76 2f       	mov	r23, r22
    1a5a:	6a 2f       	mov	r22, r26
    1a5c:	11 24       	eor	r1, r1
    1a5e:	9f 57       	subi	r25, 0x7F	; 127
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	8a f0       	brmi	.+34     	; 0x1a86 <__mulsf3_pse+0x84>
    1a64:	e1 f0       	breq	.+56     	; 0x1a9e <__mulsf3_pse+0x9c>
    1a66:	88 23       	and	r24, r24
    1a68:	4a f0       	brmi	.+18     	; 0x1a7c <__mulsf3_pse+0x7a>
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	ff 1f       	adc	r31, r31
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	66 1f       	adc	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	91 50       	subi	r25, 0x01	; 1
    1a78:	50 40       	sbci	r21, 0x00	; 0
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <__mulsf3_pse+0x64>
    1a7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a7e:	51 05       	cpc	r21, r1
    1a80:	70 f0       	brcs	.+28     	; 0x1a9e <__mulsf3_pse+0x9c>
    1a82:	5c cf       	rjmp	.-328    	; 0x193c <__fp_inf>
    1a84:	a6 cf       	rjmp	.-180    	; 0x19d2 <__fp_szero>
    1a86:	5f 3f       	cpi	r21, 0xFF	; 255
    1a88:	ec f3       	brlt	.-6      	; 0x1a84 <__mulsf3_pse+0x82>
    1a8a:	98 3e       	cpi	r25, 0xE8	; 232
    1a8c:	dc f3       	brlt	.-10     	; 0x1a84 <__mulsf3_pse+0x82>
    1a8e:	86 95       	lsr	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b7 95       	ror	r27
    1a96:	f7 95       	ror	r31
    1a98:	e7 95       	ror	r30
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	c1 f7       	brne	.-16     	; 0x1a8e <__mulsf3_pse+0x8c>
    1a9e:	fe 2b       	or	r31, r30
    1aa0:	88 0f       	add	r24, r24
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	96 95       	lsr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	08 95       	ret

00001aac <__divmodhi4>:
    1aac:	97 fb       	bst	r25, 7
    1aae:	07 2e       	mov	r0, r23
    1ab0:	16 f4       	brtc	.+4      	; 0x1ab6 <__divmodhi4+0xa>
    1ab2:	00 94       	com	r0
    1ab4:	06 d0       	rcall	.+12     	; 0x1ac2 <__divmodhi4_neg1>
    1ab6:	77 fd       	sbrc	r23, 7
    1ab8:	08 d0       	rcall	.+16     	; 0x1aca <__divmodhi4_neg2>
    1aba:	17 d0       	rcall	.+46     	; 0x1aea <__udivmodhi4>
    1abc:	07 fc       	sbrc	r0, 7
    1abe:	05 d0       	rcall	.+10     	; 0x1aca <__divmodhi4_neg2>
    1ac0:	3e f4       	brtc	.+14     	; 0x1ad0 <__divmodhi4_exit>

00001ac2 <__divmodhi4_neg1>:
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__divmodhi4_neg2>:
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad0 <__divmodhi4_exit>:
    1ad0:	08 95       	ret

00001ad2 <__umulhisi3>:
    1ad2:	a2 9f       	mul	r26, r18
    1ad4:	b0 01       	movw	r22, r0
    1ad6:	b3 9f       	mul	r27, r19
    1ad8:	c0 01       	movw	r24, r0
    1ada:	a3 9f       	mul	r26, r19
    1adc:	01 d0       	rcall	.+2      	; 0x1ae0 <__umulhisi3+0xe>
    1ade:	b2 9f       	mul	r27, r18
    1ae0:	70 0d       	add	r23, r0
    1ae2:	81 1d       	adc	r24, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	08 95       	ret

00001aea <__udivmodhi4>:
    1aea:	aa 1b       	sub	r26, r26
    1aec:	bb 1b       	sub	r27, r27
    1aee:	51 e1       	ldi	r21, 0x11	; 17
    1af0:	07 c0       	rjmp	.+14     	; 0x1b00 <__udivmodhi4_ep>

00001af2 <__udivmodhi4_loop>:
    1af2:	aa 1f       	adc	r26, r26
    1af4:	bb 1f       	adc	r27, r27
    1af6:	a6 17       	cp	r26, r22
    1af8:	b7 07       	cpc	r27, r23
    1afa:	10 f0       	brcs	.+4      	; 0x1b00 <__udivmodhi4_ep>
    1afc:	a6 1b       	sub	r26, r22
    1afe:	b7 0b       	sbc	r27, r23

00001b00 <__udivmodhi4_ep>:
    1b00:	88 1f       	adc	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	5a 95       	dec	r21
    1b06:	a9 f7       	brne	.-22     	; 0x1af2 <__udivmodhi4_loop>
    1b08:	80 95       	com	r24
    1b0a:	90 95       	com	r25
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	08 95       	ret

00001b12 <calloc>:
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	68 9f       	mul	r22, r24
    1b1c:	80 01       	movw	r16, r0
    1b1e:	69 9f       	mul	r22, r25
    1b20:	10 0d       	add	r17, r0
    1b22:	78 9f       	mul	r23, r24
    1b24:	10 0d       	add	r17, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	c8 01       	movw	r24, r16
    1b2a:	0f d0       	rcall	.+30     	; 0x1b4a <malloc>
    1b2c:	c8 2f       	mov	r28, r24
    1b2e:	d9 2f       	mov	r29, r25
    1b30:	20 97       	sbiw	r28, 0x00	; 0
    1b32:	29 f0       	breq	.+10     	; 0x1b3e <calloc+0x2c>
    1b34:	a8 01       	movw	r20, r16
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	40 d1       	rcall	.+640    	; 0x1dbe <memset>
    1b3e:	ce 01       	movw	r24, r28
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <malloc>:
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	10 f4       	brcc	.+4      	; 0x1b5c <malloc+0x12>
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	e0 91 4c 0d 	lds	r30, 0x0D4C
    1b60:	f0 91 4d 0d 	lds	r31, 0x0D4D
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
    1b6a:	d0 e0       	ldi	r29, 0x00	; 0
    1b6c:	23 c0       	rjmp	.+70     	; 0x1bb4 <malloc+0x6a>
    1b6e:	40 81       	ld	r20, Z
    1b70:	51 81       	ldd	r21, Z+1	; 0x01
    1b72:	48 17       	cp	r20, r24
    1b74:	59 07       	cpc	r21, r25
    1b76:	a8 f0       	brcs	.+42     	; 0x1ba2 <malloc+0x58>
    1b78:	48 17       	cp	r20, r24
    1b7a:	59 07       	cpc	r21, r25
    1b7c:	61 f4       	brne	.+24     	; 0x1b96 <malloc+0x4c>
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 97       	sbiw	r28, 0x00	; 0
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <malloc+0x42>
    1b86:	9b 83       	std	Y+3, r25	; 0x03
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	2e c0       	rjmp	.+92     	; 0x1be8 <malloc+0x9e>
    1b8c:	90 93 4d 0d 	sts	0x0D4D, r25
    1b90:	80 93 4c 0d 	sts	0x0D4C, r24
    1b94:	29 c0       	rjmp	.+82     	; 0x1be8 <malloc+0x9e>
    1b96:	21 15       	cp	r18, r1
    1b98:	31 05       	cpc	r19, r1
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <malloc+0x5c>
    1b9c:	42 17       	cp	r20, r18
    1b9e:	53 07       	cpc	r21, r19
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <malloc+0x5c>
    1ba2:	a9 01       	movw	r20, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <malloc+0x60>
    1ba6:	be 01       	movw	r22, r28
    1ba8:	df 01       	movw	r26, r30
    1baa:	02 81       	ldd	r16, Z+2	; 0x02
    1bac:	13 81       	ldd	r17, Z+3	; 0x03
    1bae:	ef 01       	movw	r28, r30
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	30 97       	sbiw	r30, 0x00	; 0
    1bb6:	d9 f6       	brne	.-74     	; 0x1b6e <malloc+0x24>
    1bb8:	21 15       	cp	r18, r1
    1bba:	31 05       	cpc	r19, r1
    1bbc:	09 f1       	breq	.+66     	; 0x1c00 <malloc+0xb6>
    1bbe:	28 1b       	sub	r18, r24
    1bc0:	39 0b       	sbc	r19, r25
    1bc2:	24 30       	cpi	r18, 0x04	; 4
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	90 f4       	brcc	.+36     	; 0x1bec <malloc+0xa2>
    1bc8:	12 96       	adiw	r26, 0x02	; 2
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	13 97       	sbiw	r26, 0x03	; 3
    1bd0:	61 15       	cp	r22, r1
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	21 f0       	breq	.+8      	; 0x1bde <malloc+0x94>
    1bd6:	fb 01       	movw	r30, r22
    1bd8:	93 83       	std	Z+3, r25	; 0x03
    1bda:	82 83       	std	Z+2, r24	; 0x02
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <malloc+0x9c>
    1bde:	90 93 4d 0d 	sts	0x0D4D, r25
    1be2:	80 93 4c 0d 	sts	0x0D4C, r24
    1be6:	fd 01       	movw	r30, r26
    1be8:	32 96       	adiw	r30, 0x02	; 2
    1bea:	44 c0       	rjmp	.+136    	; 0x1c74 <malloc+0x12a>
    1bec:	fd 01       	movw	r30, r26
    1bee:	e2 0f       	add	r30, r18
    1bf0:	f3 1f       	adc	r31, r19
    1bf2:	81 93       	st	Z+, r24
    1bf4:	91 93       	st	Z+, r25
    1bf6:	22 50       	subi	r18, 0x02	; 2
    1bf8:	31 09       	sbc	r19, r1
    1bfa:	2d 93       	st	X+, r18
    1bfc:	3c 93       	st	X, r19
    1bfe:	3a c0       	rjmp	.+116    	; 0x1c74 <malloc+0x12a>
    1c00:	20 91 4a 0d 	lds	r18, 0x0D4A
    1c04:	30 91 4b 0d 	lds	r19, 0x0D4B
    1c08:	23 2b       	or	r18, r19
    1c0a:	41 f4       	brne	.+16     	; 0x1c1c <malloc+0xd2>
    1c0c:	20 91 02 01 	lds	r18, 0x0102
    1c10:	30 91 03 01 	lds	r19, 0x0103
    1c14:	30 93 4b 0d 	sts	0x0D4B, r19
    1c18:	20 93 4a 0d 	sts	0x0D4A, r18
    1c1c:	20 91 00 01 	lds	r18, 0x0100
    1c20:	30 91 01 01 	lds	r19, 0x0101
    1c24:	21 15       	cp	r18, r1
    1c26:	31 05       	cpc	r19, r1
    1c28:	41 f4       	brne	.+16     	; 0x1c3a <malloc+0xf0>
    1c2a:	2d b7       	in	r18, 0x3d	; 61
    1c2c:	3e b7       	in	r19, 0x3e	; 62
    1c2e:	40 91 04 01 	lds	r20, 0x0104
    1c32:	50 91 05 01 	lds	r21, 0x0105
    1c36:	24 1b       	sub	r18, r20
    1c38:	35 0b       	sbc	r19, r21
    1c3a:	e0 91 4a 0d 	lds	r30, 0x0D4A
    1c3e:	f0 91 4b 0d 	lds	r31, 0x0D4B
    1c42:	e2 17       	cp	r30, r18
    1c44:	f3 07       	cpc	r31, r19
    1c46:	a0 f4       	brcc	.+40     	; 0x1c70 <malloc+0x126>
    1c48:	2e 1b       	sub	r18, r30
    1c4a:	3f 0b       	sbc	r19, r31
    1c4c:	28 17       	cp	r18, r24
    1c4e:	39 07       	cpc	r19, r25
    1c50:	78 f0       	brcs	.+30     	; 0x1c70 <malloc+0x126>
    1c52:	ac 01       	movw	r20, r24
    1c54:	4e 5f       	subi	r20, 0xFE	; 254
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	24 17       	cp	r18, r20
    1c5a:	35 07       	cpc	r19, r21
    1c5c:	48 f0       	brcs	.+18     	; 0x1c70 <malloc+0x126>
    1c5e:	4e 0f       	add	r20, r30
    1c60:	5f 1f       	adc	r21, r31
    1c62:	50 93 4b 0d 	sts	0x0D4B, r21
    1c66:	40 93 4a 0d 	sts	0x0D4A, r20
    1c6a:	81 93       	st	Z+, r24
    1c6c:	91 93       	st	Z+, r25
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <malloc+0x12a>
    1c70:	e0 e0       	ldi	r30, 0x00	; 0
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	cf 01       	movw	r24, r30
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	08 95       	ret

00001c80 <free>:
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <free+0x12>
    1c90:	8f c0       	rjmp	.+286    	; 0x1db0 <free+0x130>
    1c92:	dc 01       	movw	r26, r24
    1c94:	12 97       	sbiw	r26, 0x02	; 2
    1c96:	13 96       	adiw	r26, 0x03	; 3
    1c98:	1c 92       	st	X, r1
    1c9a:	1e 92       	st	-X, r1
    1c9c:	12 97       	sbiw	r26, 0x02	; 2
    1c9e:	e0 90 4c 0d 	lds	r14, 0x0D4C
    1ca2:	f0 90 4d 0d 	lds	r15, 0x0D4D
    1ca6:	e1 14       	cp	r14, r1
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	89 f4       	brne	.+34     	; 0x1cce <free+0x4e>
    1cac:	2d 91       	ld	r18, X+
    1cae:	3c 91       	ld	r19, X
    1cb0:	11 97       	sbiw	r26, 0x01	; 1
    1cb2:	28 0f       	add	r18, r24
    1cb4:	39 1f       	adc	r19, r25
    1cb6:	80 91 4a 0d 	lds	r24, 0x0D4A
    1cba:	90 91 4b 0d 	lds	r25, 0x0D4B
    1cbe:	82 17       	cp	r24, r18
    1cc0:	93 07       	cpc	r25, r19
    1cc2:	89 f5       	brne	.+98     	; 0x1d26 <free+0xa6>
    1cc4:	b0 93 4b 0d 	sts	0x0D4B, r27
    1cc8:	a0 93 4a 0d 	sts	0x0D4A, r26
    1ccc:	71 c0       	rjmp	.+226    	; 0x1db0 <free+0x130>
    1cce:	e7 01       	movw	r28, r14
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <free+0x58>
    1cd6:	ea 01       	movw	r28, r20
    1cd8:	ca 17       	cp	r28, r26
    1cda:	db 07       	cpc	r29, r27
    1cdc:	38 f4       	brcc	.+14     	; 0x1cec <free+0x6c>
    1cde:	4a 81       	ldd	r20, Y+2	; 0x02
    1ce0:	5b 81       	ldd	r21, Y+3	; 0x03
    1ce2:	9e 01       	movw	r18, r28
    1ce4:	41 15       	cp	r20, r1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	b1 f7       	brne	.-20     	; 0x1cd6 <free+0x56>
    1cea:	22 c0       	rjmp	.+68     	; 0x1d30 <free+0xb0>
    1cec:	bc 01       	movw	r22, r24
    1cee:	62 50       	subi	r22, 0x02	; 2
    1cf0:	71 09       	sbc	r23, r1
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	d3 83       	std	Z+3, r29	; 0x03
    1cf6:	c2 83       	std	Z+2, r28	; 0x02
    1cf8:	00 81       	ld	r16, Z
    1cfa:	11 81       	ldd	r17, Z+1	; 0x01
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	40 0f       	add	r20, r16
    1d00:	51 1f       	adc	r21, r17
    1d02:	4c 17       	cp	r20, r28
    1d04:	5d 07       	cpc	r21, r29
    1d06:	61 f4       	brne	.+24     	; 0x1d20 <free+0xa0>
    1d08:	48 81       	ld	r20, Y
    1d0a:	59 81       	ldd	r21, Y+1	; 0x01
    1d0c:	40 0f       	add	r20, r16
    1d0e:	51 1f       	adc	r21, r17
    1d10:	4e 5f       	subi	r20, 0xFE	; 254
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	51 83       	std	Z+1, r21	; 0x01
    1d16:	40 83       	st	Z, r20
    1d18:	4a 81       	ldd	r20, Y+2	; 0x02
    1d1a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d1c:	53 83       	std	Z+3, r21	; 0x03
    1d1e:	42 83       	std	Z+2, r20	; 0x02
    1d20:	21 15       	cp	r18, r1
    1d22:	31 05       	cpc	r19, r1
    1d24:	29 f4       	brne	.+10     	; 0x1d30 <free+0xb0>
    1d26:	b0 93 4d 0d 	sts	0x0D4D, r27
    1d2a:	a0 93 4c 0d 	sts	0x0D4C, r26
    1d2e:	40 c0       	rjmp	.+128    	; 0x1db0 <free+0x130>
    1d30:	f9 01       	movw	r30, r18
    1d32:	b3 83       	std	Z+3, r27	; 0x03
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	e9 01       	movw	r28, r18
    1d38:	69 91       	ld	r22, Y+
    1d3a:	79 91       	ld	r23, Y+
    1d3c:	c6 0f       	add	r28, r22
    1d3e:	d7 1f       	adc	r29, r23
    1d40:	ac 17       	cp	r26, r28
    1d42:	bd 07       	cpc	r27, r29
    1d44:	79 f4       	brne	.+30     	; 0x1d64 <free+0xe4>
    1d46:	dc 01       	movw	r26, r24
    1d48:	5e 91       	ld	r21, -X
    1d4a:	4e 91       	ld	r20, -X
    1d4c:	46 0f       	add	r20, r22
    1d4e:	57 1f       	adc	r21, r23
    1d50:	4e 5f       	subi	r20, 0xFE	; 254
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	51 83       	std	Z+1, r21	; 0x01
    1d56:	40 83       	st	Z, r20
    1d58:	12 96       	adiw	r26, 0x02	; 2
    1d5a:	8d 91       	ld	r24, X+
    1d5c:	9c 91       	ld	r25, X
    1d5e:	13 97       	sbiw	r26, 0x03	; 3
    1d60:	93 83       	std	Z+3, r25	; 0x03
    1d62:	82 83       	std	Z+2, r24	; 0x02
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <free+0xee>
    1d6a:	d7 01       	movw	r26, r14
    1d6c:	7c 01       	movw	r14, r24
    1d6e:	f7 01       	movw	r30, r14
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	c9 f7       	brne	.-14     	; 0x1d6a <free+0xea>
    1d78:	c7 01       	movw	r24, r14
    1d7a:	02 96       	adiw	r24, 0x02	; 2
    1d7c:	20 81       	ld	r18, Z
    1d7e:	31 81       	ldd	r19, Z+1	; 0x01
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	20 91 4a 0d 	lds	r18, 0x0D4A
    1d88:	30 91 4b 0d 	lds	r19, 0x0D4B
    1d8c:	28 17       	cp	r18, r24
    1d8e:	39 07       	cpc	r19, r25
    1d90:	79 f4       	brne	.+30     	; 0x1db0 <free+0x130>
    1d92:	10 97       	sbiw	r26, 0x00	; 0
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <free+0x120>
    1d96:	10 92 4d 0d 	sts	0x0D4D, r1
    1d9a:	10 92 4c 0d 	sts	0x0D4C, r1
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <free+0x128>
    1da0:	13 96       	adiw	r26, 0x03	; 3
    1da2:	1c 92       	st	X, r1
    1da4:	1e 92       	st	-X, r1
    1da6:	12 97       	sbiw	r26, 0x02	; 2
    1da8:	f0 92 4b 0d 	sts	0x0D4B, r15
    1dac:	e0 92 4a 0d 	sts	0x0D4A, r14
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	08 95       	ret

00001dbe <memset>:
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <memset+0x6>
    1dc2:	6d 93       	st	X+, r22
    1dc4:	41 50       	subi	r20, 0x01	; 1
    1dc6:	50 40       	sbci	r21, 0x00	; 0
    1dc8:	e0 f7       	brcc	.-8      	; 0x1dc2 <memset+0x4>
    1dca:	08 95       	ret

00001dcc <strcmp>:
    1dcc:	fb 01       	movw	r30, r22
    1dce:	dc 01       	movw	r26, r24
    1dd0:	8d 91       	ld	r24, X+
    1dd2:	01 90       	ld	r0, Z+
    1dd4:	80 19       	sub	r24, r0
    1dd6:	01 10       	cpse	r0, r1
    1dd8:	d9 f3       	breq	.-10     	; 0x1dd0 <strcmp+0x4>
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	08 95       	ret

00001dde <strcpy>:
    1dde:	fb 01       	movw	r30, r22
    1de0:	dc 01       	movw	r26, r24
    1de2:	01 90       	ld	r0, Z+
    1de4:	0d 92       	st	X+, r0
    1de6:	00 20       	and	r0, r0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <strcpy+0x4>
    1dea:	08 95       	ret

00001dec <vsnprintf>:
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	8c 01       	movw	r16, r24
    1e06:	ca 01       	movw	r24, r20
    1e08:	46 e0       	ldi	r20, 0x06	; 6
    1e0a:	4c 83       	std	Y+4, r20	; 0x04
    1e0c:	1a 83       	std	Y+2, r17	; 0x02
    1e0e:	09 83       	std	Y+1, r16	; 0x01
    1e10:	77 ff       	sbrs	r23, 7
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vsnprintf+0x2c>
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	70 e8       	ldi	r23, 0x80	; 128
    1e18:	61 50       	subi	r22, 0x01	; 1
    1e1a:	71 09       	sbc	r23, r1
    1e1c:	7e 83       	std	Y+6, r23	; 0x06
    1e1e:	6d 83       	std	Y+5, r22	; 0x05
    1e20:	a9 01       	movw	r20, r18
    1e22:	bc 01       	movw	r22, r24
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	19 d0       	rcall	.+50     	; 0x1e5c <vfprintf>
    1e2a:	4d 81       	ldd	r20, Y+5	; 0x05
    1e2c:	5e 81       	ldd	r21, Y+6	; 0x06
    1e2e:	57 fd       	sbrc	r21, 7
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <vsnprintf+0x5a>
    1e32:	2f 81       	ldd	r18, Y+7	; 0x07
    1e34:	38 85       	ldd	r19, Y+8	; 0x08
    1e36:	42 17       	cp	r20, r18
    1e38:	53 07       	cpc	r21, r19
    1e3a:	0c f4       	brge	.+2      	; 0x1e3e <vsnprintf+0x52>
    1e3c:	9a 01       	movw	r18, r20
    1e3e:	f8 01       	movw	r30, r16
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	10 82       	st	Z, r1
    1e46:	2e 96       	adiw	r28, 0x0e	; 14
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <vfprintf>:
    1e5c:	2f 92       	push	r2
    1e5e:	3f 92       	push	r3
    1e60:	4f 92       	push	r4
    1e62:	5f 92       	push	r5
    1e64:	6f 92       	push	r6
    1e66:	7f 92       	push	r7
    1e68:	8f 92       	push	r8
    1e6a:	9f 92       	push	r9
    1e6c:	af 92       	push	r10
    1e6e:	bf 92       	push	r11
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	2c 97       	sbiw	r28, 0x0c	; 12
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	7c 01       	movw	r14, r24
    1e92:	6b 01       	movw	r12, r22
    1e94:	8a 01       	movw	r16, r20
    1e96:	fc 01       	movw	r30, r24
    1e98:	17 82       	std	Z+7, r1	; 0x07
    1e9a:	16 82       	std	Z+6, r1	; 0x06
    1e9c:	83 81       	ldd	r24, Z+3	; 0x03
    1e9e:	81 ff       	sbrs	r24, 1
    1ea0:	b9 c1       	rjmp	.+882    	; 0x2214 <vfprintf+0x3b8>
    1ea2:	88 24       	eor	r8, r8
    1ea4:	83 94       	inc	r8
    1ea6:	91 2c       	mov	r9, r1
    1ea8:	8c 0e       	add	r8, r28
    1eaa:	9d 1e       	adc	r9, r29
    1eac:	f7 01       	movw	r30, r14
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	93 fd       	sbrc	r25, 3
    1eb4:	85 91       	lpm	r24, Z+
    1eb6:	93 ff       	sbrs	r25, 3
    1eb8:	81 91       	ld	r24, Z+
    1eba:	6f 01       	movw	r12, r30
    1ebc:	88 23       	and	r24, r24
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <vfprintf+0x66>
    1ec0:	a5 c1       	rjmp	.+842    	; 0x220c <vfprintf+0x3b0>
    1ec2:	85 32       	cpi	r24, 0x25	; 37
    1ec4:	39 f4       	brne	.+14     	; 0x1ed4 <vfprintf+0x78>
    1ec6:	93 fd       	sbrc	r25, 3
    1ec8:	85 91       	lpm	r24, Z+
    1eca:	93 ff       	sbrs	r25, 3
    1ecc:	81 91       	ld	r24, Z+
    1ece:	6f 01       	movw	r12, r30
    1ed0:	85 32       	cpi	r24, 0x25	; 37
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <vfprintf+0x80>
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	cf d1       	rcall	.+926    	; 0x2278 <fputc>
    1eda:	e8 cf       	rjmp	.-48     	; 0x1eac <vfprintf+0x50>
    1edc:	51 2c       	mov	r5, r1
    1ede:	31 2c       	mov	r3, r1
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	20 32       	cpi	r18, 0x20	; 32
    1ee4:	a8 f4       	brcc	.+42     	; 0x1f10 <vfprintf+0xb4>
    1ee6:	8b 32       	cpi	r24, 0x2B	; 43
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <vfprintf+0xa6>
    1eea:	28 f4       	brcc	.+10     	; 0x1ef6 <vfprintf+0x9a>
    1eec:	80 32       	cpi	r24, 0x20	; 32
    1eee:	51 f0       	breq	.+20     	; 0x1f04 <vfprintf+0xa8>
    1ef0:	83 32       	cpi	r24, 0x23	; 35
    1ef2:	71 f4       	brne	.+28     	; 0x1f10 <vfprintf+0xb4>
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <vfprintf+0xb0>
    1ef6:	8d 32       	cpi	r24, 0x2D	; 45
    1ef8:	39 f0       	breq	.+14     	; 0x1f08 <vfprintf+0xac>
    1efa:	80 33       	cpi	r24, 0x30	; 48
    1efc:	49 f4       	brne	.+18     	; 0x1f10 <vfprintf+0xb4>
    1efe:	21 60       	ori	r18, 0x01	; 1
    1f00:	28 c0       	rjmp	.+80     	; 0x1f52 <vfprintf+0xf6>
    1f02:	22 60       	ori	r18, 0x02	; 2
    1f04:	24 60       	ori	r18, 0x04	; 4
    1f06:	25 c0       	rjmp	.+74     	; 0x1f52 <vfprintf+0xf6>
    1f08:	28 60       	ori	r18, 0x08	; 8
    1f0a:	23 c0       	rjmp	.+70     	; 0x1f52 <vfprintf+0xf6>
    1f0c:	20 61       	ori	r18, 0x10	; 16
    1f0e:	21 c0       	rjmp	.+66     	; 0x1f52 <vfprintf+0xf6>
    1f10:	27 fd       	sbrc	r18, 7
    1f12:	27 c0       	rjmp	.+78     	; 0x1f62 <vfprintf+0x106>
    1f14:	38 2f       	mov	r19, r24
    1f16:	30 53       	subi	r19, 0x30	; 48
    1f18:	3a 30       	cpi	r19, 0x0A	; 10
    1f1a:	78 f4       	brcc	.+30     	; 0x1f3a <vfprintf+0xde>
    1f1c:	26 ff       	sbrs	r18, 6
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <vfprintf+0xd0>
    1f20:	fa e0       	ldi	r31, 0x0A	; 10
    1f22:	5f 9e       	mul	r5, r31
    1f24:	30 0d       	add	r19, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	53 2e       	mov	r5, r19
    1f2a:	13 c0       	rjmp	.+38     	; 0x1f52 <vfprintf+0xf6>
    1f2c:	8a e0       	ldi	r24, 0x0A	; 10
    1f2e:	38 9e       	mul	r3, r24
    1f30:	30 0d       	add	r19, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	33 2e       	mov	r3, r19
    1f36:	20 62       	ori	r18, 0x20	; 32
    1f38:	0c c0       	rjmp	.+24     	; 0x1f52 <vfprintf+0xf6>
    1f3a:	8e 32       	cpi	r24, 0x2E	; 46
    1f3c:	21 f4       	brne	.+8      	; 0x1f46 <vfprintf+0xea>
    1f3e:	26 fd       	sbrc	r18, 6
    1f40:	65 c1       	rjmp	.+714    	; 0x220c <vfprintf+0x3b0>
    1f42:	20 64       	ori	r18, 0x40	; 64
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0xf6>
    1f46:	8c 36       	cpi	r24, 0x6C	; 108
    1f48:	11 f4       	brne	.+4      	; 0x1f4e <vfprintf+0xf2>
    1f4a:	20 68       	ori	r18, 0x80	; 128
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vfprintf+0xf6>
    1f4e:	88 36       	cpi	r24, 0x68	; 104
    1f50:	41 f4       	brne	.+16     	; 0x1f62 <vfprintf+0x106>
    1f52:	f6 01       	movw	r30, r12
    1f54:	93 fd       	sbrc	r25, 3
    1f56:	85 91       	lpm	r24, Z+
    1f58:	93 ff       	sbrs	r25, 3
    1f5a:	81 91       	ld	r24, Z+
    1f5c:	6f 01       	movw	r12, r30
    1f5e:	81 11       	cpse	r24, r1
    1f60:	c0 cf       	rjmp	.-128    	; 0x1ee2 <vfprintf+0x86>
    1f62:	98 2f       	mov	r25, r24
    1f64:	95 54       	subi	r25, 0x45	; 69
    1f66:	93 30       	cpi	r25, 0x03	; 3
    1f68:	18 f0       	brcs	.+6      	; 0x1f70 <vfprintf+0x114>
    1f6a:	90 52       	subi	r25, 0x20	; 32
    1f6c:	93 30       	cpi	r25, 0x03	; 3
    1f6e:	28 f4       	brcc	.+10     	; 0x1f7a <vfprintf+0x11e>
    1f70:	0c 5f       	subi	r16, 0xFC	; 252
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	ff e3       	ldi	r31, 0x3F	; 63
    1f76:	f9 83       	std	Y+1, r31	; 0x01
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <vfprintf+0x138>
    1f7a:	83 36       	cpi	r24, 0x63	; 99
    1f7c:	31 f0       	breq	.+12     	; 0x1f8a <vfprintf+0x12e>
    1f7e:	83 37       	cpi	r24, 0x73	; 115
    1f80:	71 f0       	breq	.+28     	; 0x1f9e <vfprintf+0x142>
    1f82:	83 35       	cpi	r24, 0x53	; 83
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <vfprintf+0x12c>
    1f86:	5a c0       	rjmp	.+180    	; 0x203c <vfprintf+0x1e0>
    1f88:	22 c0       	rjmp	.+68     	; 0x1fce <vfprintf+0x172>
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 81       	ld	r24, Z
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	0e 5f       	subi	r16, 0xFE	; 254
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	44 24       	eor	r4, r4
    1f96:	43 94       	inc	r4
    1f98:	51 2c       	mov	r5, r1
    1f9a:	54 01       	movw	r10, r8
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <vfprintf+0x16a>
    1f9e:	38 01       	movw	r6, r16
    1fa0:	f2 e0       	ldi	r31, 0x02	; 2
    1fa2:	6f 0e       	add	r6, r31
    1fa4:	71 1c       	adc	r7, r1
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	a0 80       	ld	r10, Z
    1faa:	b1 80       	ldd	r11, Z+1	; 0x01
    1fac:	26 ff       	sbrs	r18, 6
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <vfprintf+0x15a>
    1fb0:	65 2d       	mov	r22, r5
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0x15e>
    1fb6:	6f ef       	ldi	r22, 0xFF	; 255
    1fb8:	7f ef       	ldi	r23, 0xFF	; 255
    1fba:	c5 01       	movw	r24, r10
    1fbc:	2c 87       	std	Y+12, r18	; 0x0c
    1fbe:	51 d1       	rcall	.+674    	; 0x2262 <strnlen>
    1fc0:	2c 01       	movw	r4, r24
    1fc2:	83 01       	movw	r16, r6
    1fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc6:	6f e7       	ldi	r22, 0x7F	; 127
    1fc8:	26 2e       	mov	r2, r22
    1fca:	22 22       	and	r2, r18
    1fcc:	17 c0       	rjmp	.+46     	; 0x1ffc <vfprintf+0x1a0>
    1fce:	38 01       	movw	r6, r16
    1fd0:	f2 e0       	ldi	r31, 0x02	; 2
    1fd2:	6f 0e       	add	r6, r31
    1fd4:	71 1c       	adc	r7, r1
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	a0 80       	ld	r10, Z
    1fda:	b1 80       	ldd	r11, Z+1	; 0x01
    1fdc:	26 ff       	sbrs	r18, 6
    1fde:	03 c0       	rjmp	.+6      	; 0x1fe6 <vfprintf+0x18a>
    1fe0:	65 2d       	mov	r22, r5
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <vfprintf+0x18e>
    1fe6:	6f ef       	ldi	r22, 0xFF	; 255
    1fe8:	7f ef       	ldi	r23, 0xFF	; 255
    1fea:	c5 01       	movw	r24, r10
    1fec:	2c 87       	std	Y+12, r18	; 0x0c
    1fee:	2e d1       	rcall	.+604    	; 0x224c <strnlen_P>
    1ff0:	2c 01       	movw	r4, r24
    1ff2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ff4:	50 e8       	ldi	r21, 0x80	; 128
    1ff6:	25 2e       	mov	r2, r21
    1ff8:	22 2a       	or	r2, r18
    1ffa:	83 01       	movw	r16, r6
    1ffc:	23 fc       	sbrc	r2, 3
    1ffe:	1a c0       	rjmp	.+52     	; 0x2034 <vfprintf+0x1d8>
    2000:	05 c0       	rjmp	.+10     	; 0x200c <vfprintf+0x1b0>
    2002:	b7 01       	movw	r22, r14
    2004:	80 e2       	ldi	r24, 0x20	; 32
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	37 d1       	rcall	.+622    	; 0x2278 <fputc>
    200a:	3a 94       	dec	r3
    200c:	83 2d       	mov	r24, r3
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	48 16       	cp	r4, r24
    2012:	59 06       	cpc	r5, r25
    2014:	b0 f3       	brcs	.-20     	; 0x2002 <vfprintf+0x1a6>
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <vfprintf+0x1d8>
    2018:	f5 01       	movw	r30, r10
    201a:	27 fc       	sbrc	r2, 7
    201c:	85 91       	lpm	r24, Z+
    201e:	27 fe       	sbrs	r2, 7
    2020:	81 91       	ld	r24, Z+
    2022:	5f 01       	movw	r10, r30
    2024:	b7 01       	movw	r22, r14
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	27 d1       	rcall	.+590    	; 0x2278 <fputc>
    202a:	31 10       	cpse	r3, r1
    202c:	3a 94       	dec	r3
    202e:	f1 e0       	ldi	r31, 0x01	; 1
    2030:	4f 1a       	sub	r4, r31
    2032:	51 08       	sbc	r5, r1
    2034:	41 14       	cp	r4, r1
    2036:	51 04       	cpc	r5, r1
    2038:	79 f7       	brne	.-34     	; 0x2018 <vfprintf+0x1bc>
    203a:	e5 c0       	rjmp	.+458    	; 0x2206 <vfprintf+0x3aa>
    203c:	84 36       	cpi	r24, 0x64	; 100
    203e:	11 f0       	breq	.+4      	; 0x2044 <vfprintf+0x1e8>
    2040:	89 36       	cpi	r24, 0x69	; 105
    2042:	39 f5       	brne	.+78     	; 0x2092 <vfprintf+0x236>
    2044:	f8 01       	movw	r30, r16
    2046:	27 ff       	sbrs	r18, 7
    2048:	07 c0       	rjmp	.+14     	; 0x2058 <vfprintf+0x1fc>
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	0c 5f       	subi	r16, 0xFC	; 252
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <vfprintf+0x20c>
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	88 27       	eor	r24, r24
    205e:	77 fd       	sbrc	r23, 7
    2060:	80 95       	com	r24
    2062:	98 2f       	mov	r25, r24
    2064:	0e 5f       	subi	r16, 0xFE	; 254
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	4f e6       	ldi	r20, 0x6F	; 111
    206a:	b4 2e       	mov	r11, r20
    206c:	b2 22       	and	r11, r18
    206e:	97 ff       	sbrs	r25, 7
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <vfprintf+0x228>
    2072:	90 95       	com	r25
    2074:	80 95       	com	r24
    2076:	70 95       	com	r23
    2078:	61 95       	neg	r22
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	8f 4f       	sbci	r24, 0xFF	; 255
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	f0 e8       	ldi	r31, 0x80	; 128
    2082:	bf 2a       	or	r11, r31
    2084:	2a e0       	ldi	r18, 0x0A	; 10
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	a4 01       	movw	r20, r8
    208a:	22 d1       	rcall	.+580    	; 0x22d0 <__ultoa_invert>
    208c:	a8 2e       	mov	r10, r24
    208e:	a8 18       	sub	r10, r8
    2090:	42 c0       	rjmp	.+132    	; 0x2116 <vfprintf+0x2ba>
    2092:	85 37       	cpi	r24, 0x75	; 117
    2094:	31 f4       	brne	.+12     	; 0x20a2 <vfprintf+0x246>
    2096:	3f ee       	ldi	r19, 0xEF	; 239
    2098:	b3 2e       	mov	r11, r19
    209a:	b2 22       	and	r11, r18
    209c:	2a e0       	ldi	r18, 0x0A	; 10
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	24 c0       	rjmp	.+72     	; 0x20ea <vfprintf+0x28e>
    20a2:	99 ef       	ldi	r25, 0xF9	; 249
    20a4:	b9 2e       	mov	r11, r25
    20a6:	b2 22       	and	r11, r18
    20a8:	8f 36       	cpi	r24, 0x6F	; 111
    20aa:	b9 f0       	breq	.+46     	; 0x20da <vfprintf+0x27e>
    20ac:	20 f4       	brcc	.+8      	; 0x20b6 <vfprintf+0x25a>
    20ae:	88 35       	cpi	r24, 0x58	; 88
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x258>
    20b2:	ac c0       	rjmp	.+344    	; 0x220c <vfprintf+0x3b0>
    20b4:	0d c0       	rjmp	.+26     	; 0x20d0 <vfprintf+0x274>
    20b6:	80 37       	cpi	r24, 0x70	; 112
    20b8:	21 f0       	breq	.+8      	; 0x20c2 <vfprintf+0x266>
    20ba:	88 37       	cpi	r24, 0x78	; 120
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <vfprintf+0x264>
    20be:	a6 c0       	rjmp	.+332    	; 0x220c <vfprintf+0x3b0>
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <vfprintf+0x26a>
    20c2:	20 e1       	ldi	r18, 0x10	; 16
    20c4:	b2 2a       	or	r11, r18
    20c6:	b4 fe       	sbrs	r11, 4
    20c8:	0b c0       	rjmp	.+22     	; 0x20e0 <vfprintf+0x284>
    20ca:	84 e0       	ldi	r24, 0x04	; 4
    20cc:	b8 2a       	or	r11, r24
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <vfprintf+0x284>
    20d0:	24 ff       	sbrs	r18, 4
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <vfprintf+0x28a>
    20d4:	e6 e0       	ldi	r30, 0x06	; 6
    20d6:	be 2a       	or	r11, r30
    20d8:	06 c0       	rjmp	.+12     	; 0x20e6 <vfprintf+0x28a>
    20da:	28 e0       	ldi	r18, 0x08	; 8
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <vfprintf+0x28e>
    20e0:	20 e1       	ldi	r18, 0x10	; 16
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <vfprintf+0x28e>
    20e6:	20 e1       	ldi	r18, 0x10	; 16
    20e8:	32 e0       	ldi	r19, 0x02	; 2
    20ea:	f8 01       	movw	r30, r16
    20ec:	b7 fe       	sbrs	r11, 7
    20ee:	07 c0       	rjmp	.+14     	; 0x20fe <vfprintf+0x2a2>
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	0c 5f       	subi	r16, 0xFC	; 252
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <vfprintf+0x2ae>
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 5f       	subi	r16, 0xFE	; 254
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	a4 01       	movw	r20, r8
    210c:	e1 d0       	rcall	.+450    	; 0x22d0 <__ultoa_invert>
    210e:	a8 2e       	mov	r10, r24
    2110:	a8 18       	sub	r10, r8
    2112:	ff e7       	ldi	r31, 0x7F	; 127
    2114:	bf 22       	and	r11, r31
    2116:	b6 fe       	sbrs	r11, 6
    2118:	0b c0       	rjmp	.+22     	; 0x2130 <vfprintf+0x2d4>
    211a:	2b 2d       	mov	r18, r11
    211c:	2e 7f       	andi	r18, 0xFE	; 254
    211e:	a5 14       	cp	r10, r5
    2120:	50 f4       	brcc	.+20     	; 0x2136 <vfprintf+0x2da>
    2122:	b4 fe       	sbrs	r11, 4
    2124:	0a c0       	rjmp	.+20     	; 0x213a <vfprintf+0x2de>
    2126:	b2 fc       	sbrc	r11, 2
    2128:	08 c0       	rjmp	.+16     	; 0x213a <vfprintf+0x2de>
    212a:	2b 2d       	mov	r18, r11
    212c:	2e 7e       	andi	r18, 0xEE	; 238
    212e:	05 c0       	rjmp	.+10     	; 0x213a <vfprintf+0x2de>
    2130:	7a 2c       	mov	r7, r10
    2132:	2b 2d       	mov	r18, r11
    2134:	03 c0       	rjmp	.+6      	; 0x213c <vfprintf+0x2e0>
    2136:	7a 2c       	mov	r7, r10
    2138:	01 c0       	rjmp	.+2      	; 0x213c <vfprintf+0x2e0>
    213a:	75 2c       	mov	r7, r5
    213c:	24 ff       	sbrs	r18, 4
    213e:	0d c0       	rjmp	.+26     	; 0x215a <vfprintf+0x2fe>
    2140:	fe 01       	movw	r30, r28
    2142:	ea 0d       	add	r30, r10
    2144:	f1 1d       	adc	r31, r1
    2146:	80 81       	ld	r24, Z
    2148:	80 33       	cpi	r24, 0x30	; 48
    214a:	11 f4       	brne	.+4      	; 0x2150 <vfprintf+0x2f4>
    214c:	29 7e       	andi	r18, 0xE9	; 233
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <vfprintf+0x306>
    2150:	22 ff       	sbrs	r18, 2
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <vfprintf+0x304>
    2154:	73 94       	inc	r7
    2156:	73 94       	inc	r7
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <vfprintf+0x306>
    215a:	82 2f       	mov	r24, r18
    215c:	86 78       	andi	r24, 0x86	; 134
    215e:	09 f0       	breq	.+2      	; 0x2162 <vfprintf+0x306>
    2160:	73 94       	inc	r7
    2162:	23 fd       	sbrc	r18, 3
    2164:	13 c0       	rjmp	.+38     	; 0x218c <vfprintf+0x330>
    2166:	20 ff       	sbrs	r18, 0
    2168:	0e c0       	rjmp	.+28     	; 0x2186 <vfprintf+0x32a>
    216a:	5a 2c       	mov	r5, r10
    216c:	73 14       	cp	r7, r3
    216e:	58 f4       	brcc	.+22     	; 0x2186 <vfprintf+0x32a>
    2170:	53 0c       	add	r5, r3
    2172:	57 18       	sub	r5, r7
    2174:	73 2c       	mov	r7, r3
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <vfprintf+0x32a>
    2178:	b7 01       	movw	r22, r14
    217a:	80 e2       	ldi	r24, 0x20	; 32
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	2c 87       	std	Y+12, r18	; 0x0c
    2180:	7b d0       	rcall	.+246    	; 0x2278 <fputc>
    2182:	73 94       	inc	r7
    2184:	2c 85       	ldd	r18, Y+12	; 0x0c
    2186:	73 14       	cp	r7, r3
    2188:	b8 f3       	brcs	.-18     	; 0x2178 <vfprintf+0x31c>
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <vfprintf+0x338>
    218c:	73 14       	cp	r7, r3
    218e:	10 f4       	brcc	.+4      	; 0x2194 <vfprintf+0x338>
    2190:	37 18       	sub	r3, r7
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <vfprintf+0x33a>
    2194:	31 2c       	mov	r3, r1
    2196:	24 ff       	sbrs	r18, 4
    2198:	11 c0       	rjmp	.+34     	; 0x21bc <vfprintf+0x360>
    219a:	b7 01       	movw	r22, r14
    219c:	80 e3       	ldi	r24, 0x30	; 48
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	2c 87       	std	Y+12, r18	; 0x0c
    21a2:	6a d0       	rcall	.+212    	; 0x2278 <fputc>
    21a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21a6:	22 ff       	sbrs	r18, 2
    21a8:	1c c0       	rjmp	.+56     	; 0x21e2 <vfprintf+0x386>
    21aa:	21 ff       	sbrs	r18, 1
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <vfprintf+0x358>
    21ae:	88 e5       	ldi	r24, 0x58	; 88
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <vfprintf+0x35c>
    21b4:	88 e7       	ldi	r24, 0x78	; 120
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	b7 01       	movw	r22, r14
    21ba:	0c c0       	rjmp	.+24     	; 0x21d4 <vfprintf+0x378>
    21bc:	82 2f       	mov	r24, r18
    21be:	86 78       	andi	r24, 0x86	; 134
    21c0:	81 f0       	breq	.+32     	; 0x21e2 <vfprintf+0x386>
    21c2:	21 fd       	sbrc	r18, 1
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <vfprintf+0x36e>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <vfprintf+0x370>
    21ca:	8b e2       	ldi	r24, 0x2B	; 43
    21cc:	27 fd       	sbrc	r18, 7
    21ce:	8d e2       	ldi	r24, 0x2D	; 45
    21d0:	b7 01       	movw	r22, r14
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	51 d0       	rcall	.+162    	; 0x2278 <fputc>
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <vfprintf+0x386>
    21d8:	b7 01       	movw	r22, r14
    21da:	80 e3       	ldi	r24, 0x30	; 48
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	4c d0       	rcall	.+152    	; 0x2278 <fputc>
    21e0:	5a 94       	dec	r5
    21e2:	a5 14       	cp	r10, r5
    21e4:	c8 f3       	brcs	.-14     	; 0x21d8 <vfprintf+0x37c>
    21e6:	aa 94       	dec	r10
    21e8:	f4 01       	movw	r30, r8
    21ea:	ea 0d       	add	r30, r10
    21ec:	f1 1d       	adc	r31, r1
    21ee:	b7 01       	movw	r22, r14
    21f0:	80 81       	ld	r24, Z
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	41 d0       	rcall	.+130    	; 0x2278 <fputc>
    21f6:	a1 10       	cpse	r10, r1
    21f8:	f6 cf       	rjmp	.-20     	; 0x21e6 <vfprintf+0x38a>
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <vfprintf+0x3aa>
    21fc:	b7 01       	movw	r22, r14
    21fe:	80 e2       	ldi	r24, 0x20	; 32
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	3a d0       	rcall	.+116    	; 0x2278 <fputc>
    2204:	3a 94       	dec	r3
    2206:	31 10       	cpse	r3, r1
    2208:	f9 cf       	rjmp	.-14     	; 0x21fc <vfprintf+0x3a0>
    220a:	50 ce       	rjmp	.-864    	; 0x1eac <vfprintf+0x50>
    220c:	f7 01       	movw	r30, r14
    220e:	26 81       	ldd	r18, Z+6	; 0x06
    2210:	37 81       	ldd	r19, Z+7	; 0x07
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <vfprintf+0x3bc>
    2214:	2f ef       	ldi	r18, 0xFF	; 255
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	c9 01       	movw	r24, r18
    221a:	2c 96       	adiw	r28, 0x0c	; 12
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	8f 90       	pop	r8
    223e:	7f 90       	pop	r7
    2240:	6f 90       	pop	r6
    2242:	5f 90       	pop	r5
    2244:	4f 90       	pop	r4
    2246:	3f 90       	pop	r3
    2248:	2f 90       	pop	r2
    224a:	08 95       	ret

0000224c <strnlen_P>:
    224c:	fc 01       	movw	r30, r24
    224e:	05 90       	lpm	r0, Z+
    2250:	61 50       	subi	r22, 0x01	; 1
    2252:	70 40       	sbci	r23, 0x00	; 0
    2254:	01 10       	cpse	r0, r1
    2256:	d8 f7       	brcc	.-10     	; 0x224e <strnlen_P+0x2>
    2258:	80 95       	com	r24
    225a:	90 95       	com	r25
    225c:	8e 0f       	add	r24, r30
    225e:	9f 1f       	adc	r25, r31
    2260:	08 95       	ret

00002262 <strnlen>:
    2262:	fc 01       	movw	r30, r24
    2264:	61 50       	subi	r22, 0x01	; 1
    2266:	70 40       	sbci	r23, 0x00	; 0
    2268:	01 90       	ld	r0, Z+
    226a:	01 10       	cpse	r0, r1
    226c:	d8 f7       	brcc	.-10     	; 0x2264 <strnlen+0x2>
    226e:	80 95       	com	r24
    2270:	90 95       	com	r25
    2272:	8e 0f       	add	r24, r30
    2274:	9f 1f       	adc	r25, r31
    2276:	08 95       	ret

00002278 <fputc>:
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	8c 01       	movw	r16, r24
    2282:	eb 01       	movw	r28, r22
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	81 fd       	sbrc	r24, 1
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <fputc+0x18>
    228a:	0f ef       	ldi	r16, 0xFF	; 255
    228c:	1f ef       	ldi	r17, 0xFF	; 255
    228e:	1a c0       	rjmp	.+52     	; 0x22c4 <fputc+0x4c>
    2290:	82 ff       	sbrs	r24, 2
    2292:	0d c0       	rjmp	.+26     	; 0x22ae <fputc+0x36>
    2294:	2e 81       	ldd	r18, Y+6	; 0x06
    2296:	3f 81       	ldd	r19, Y+7	; 0x07
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	28 17       	cp	r18, r24
    229e:	39 07       	cpc	r19, r25
    22a0:	64 f4       	brge	.+24     	; 0x22ba <fputc+0x42>
    22a2:	e8 81       	ld	r30, Y
    22a4:	f9 81       	ldd	r31, Y+1	; 0x01
    22a6:	01 93       	st	Z+, r16
    22a8:	f9 83       	std	Y+1, r31	; 0x01
    22aa:	e8 83       	st	Y, r30
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <fputc+0x42>
    22ae:	e8 85       	ldd	r30, Y+8	; 0x08
    22b0:	f9 85       	ldd	r31, Y+9	; 0x09
    22b2:	80 2f       	mov	r24, r16
    22b4:	09 95       	icall
    22b6:	89 2b       	or	r24, r25
    22b8:	41 f7       	brne	.-48     	; 0x228a <fputc+0x12>
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	9f 81       	ldd	r25, Y+7	; 0x07
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
    22c4:	c8 01       	movw	r24, r16
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <__ultoa_invert>:
    22d0:	fa 01       	movw	r30, r20
    22d2:	aa 27       	eor	r26, r26
    22d4:	28 30       	cpi	r18, 0x08	; 8
    22d6:	51 f1       	breq	.+84     	; 0x232c <__ultoa_invert+0x5c>
    22d8:	20 31       	cpi	r18, 0x10	; 16
    22da:	81 f1       	breq	.+96     	; 0x233c <__ultoa_invert+0x6c>
    22dc:	e8 94       	clt
    22de:	6f 93       	push	r22
    22e0:	6e 7f       	andi	r22, 0xFE	; 254
    22e2:	6e 5f       	subi	r22, 0xFE	; 254
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	8f 4f       	sbci	r24, 0xFF	; 255
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	af 4f       	sbci	r26, 0xFF	; 255
    22ec:	b1 e0       	ldi	r27, 0x01	; 1
    22ee:	3e d0       	rcall	.+124    	; 0x236c <__ultoa_invert+0x9c>
    22f0:	b4 e0       	ldi	r27, 0x04	; 4
    22f2:	3c d0       	rcall	.+120    	; 0x236c <__ultoa_invert+0x9c>
    22f4:	67 0f       	add	r22, r23
    22f6:	78 1f       	adc	r23, r24
    22f8:	89 1f       	adc	r24, r25
    22fa:	9a 1f       	adc	r25, r26
    22fc:	a1 1d       	adc	r26, r1
    22fe:	68 0f       	add	r22, r24
    2300:	79 1f       	adc	r23, r25
    2302:	8a 1f       	adc	r24, r26
    2304:	91 1d       	adc	r25, r1
    2306:	a1 1d       	adc	r26, r1
    2308:	6a 0f       	add	r22, r26
    230a:	71 1d       	adc	r23, r1
    230c:	81 1d       	adc	r24, r1
    230e:	91 1d       	adc	r25, r1
    2310:	a1 1d       	adc	r26, r1
    2312:	20 d0       	rcall	.+64     	; 0x2354 <__ultoa_invert+0x84>
    2314:	09 f4       	brne	.+2      	; 0x2318 <__ultoa_invert+0x48>
    2316:	68 94       	set
    2318:	3f 91       	pop	r19
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	26 9f       	mul	r18, r22
    231e:	11 24       	eor	r1, r1
    2320:	30 19       	sub	r19, r0
    2322:	30 5d       	subi	r19, 0xD0	; 208
    2324:	31 93       	st	Z+, r19
    2326:	de f6       	brtc	.-74     	; 0x22de <__ultoa_invert+0xe>
    2328:	cf 01       	movw	r24, r30
    232a:	08 95       	ret
    232c:	46 2f       	mov	r20, r22
    232e:	47 70       	andi	r20, 0x07	; 7
    2330:	40 5d       	subi	r20, 0xD0	; 208
    2332:	41 93       	st	Z+, r20
    2334:	b3 e0       	ldi	r27, 0x03	; 3
    2336:	0f d0       	rcall	.+30     	; 0x2356 <__ultoa_invert+0x86>
    2338:	c9 f7       	brne	.-14     	; 0x232c <__ultoa_invert+0x5c>
    233a:	f6 cf       	rjmp	.-20     	; 0x2328 <__ultoa_invert+0x58>
    233c:	46 2f       	mov	r20, r22
    233e:	4f 70       	andi	r20, 0x0F	; 15
    2340:	40 5d       	subi	r20, 0xD0	; 208
    2342:	4a 33       	cpi	r20, 0x3A	; 58
    2344:	18 f0       	brcs	.+6      	; 0x234c <__ultoa_invert+0x7c>
    2346:	49 5d       	subi	r20, 0xD9	; 217
    2348:	31 fd       	sbrc	r19, 1
    234a:	40 52       	subi	r20, 0x20	; 32
    234c:	41 93       	st	Z+, r20
    234e:	02 d0       	rcall	.+4      	; 0x2354 <__ultoa_invert+0x84>
    2350:	a9 f7       	brne	.-22     	; 0x233c <__ultoa_invert+0x6c>
    2352:	ea cf       	rjmp	.-44     	; 0x2328 <__ultoa_invert+0x58>
    2354:	b4 e0       	ldi	r27, 0x04	; 4
    2356:	a6 95       	lsr	r26
    2358:	97 95       	ror	r25
    235a:	87 95       	ror	r24
    235c:	77 95       	ror	r23
    235e:	67 95       	ror	r22
    2360:	ba 95       	dec	r27
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__ultoa_invert+0x86>
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 05       	cpc	r22, r1
    2368:	71 05       	cpc	r23, r1
    236a:	08 95       	ret
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	0a 2e       	mov	r0, r26
    2372:	06 94       	lsr	r0
    2374:	57 95       	ror	r21
    2376:	47 95       	ror	r20
    2378:	37 95       	ror	r19
    237a:	27 95       	ror	r18
    237c:	ba 95       	dec	r27
    237e:	c9 f7       	brne	.-14     	; 0x2372 <__ultoa_invert+0xa2>
    2380:	62 0f       	add	r22, r18
    2382:	73 1f       	adc	r23, r19
    2384:	84 1f       	adc	r24, r20
    2386:	95 1f       	adc	r25, r21
    2388:	a0 1d       	adc	r26, r0
    238a:	08 95       	ret

0000238c <_exit>:
    238c:	f8 94       	cli

0000238e <__stop_program>:
    238e:	ff cf       	rjmp	.-2      	; 0x238e <__stop_program>
